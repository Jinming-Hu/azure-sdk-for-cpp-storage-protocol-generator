service_name: Blobs
output_hpp: azure/storage/blobs/protocol/blob_rest_client.hpp
output_cpp: blob_rest_client.cpp

include_headers: [
    [
      "<string>",
      "<vector>",
      "<chrono>",
      "<memory>",
      "<type_traits>",
    ],
    [
      "<azure/core/etag.hpp>",
      "<azure/core/datetime.hpp>",
      "<azure/core/nullable.hpp>",
      "<azure/core/context.hpp>",
      "<azure/core/response.hpp>",
      "<azure/core/http/http.hpp>",
      "<azure/core/internal/http/pipeline.hpp>",
      "<azure/storage/common/crypt.hpp>",
      "<azure/storage/common/internal/xml_wrapper.hpp>",
      "<azure/storage/common/storage_common.hpp>",
      "<azure/storage/common/storage_exception.hpp>",
    ],
    [
      '"azure/storage/blobs/dll_import_export.hpp"',
    ],
]

Constants:
  ApiVersion: &ApiVersion "2020-02-10"

CommentTemplate:
  ETag: "The ETag contains a value that you can use to perform operations conditionally."
  LastModified: "The date and time the container was last modified. Any operation that modifies the blob, including an update of the metadata or properties, changes the last-modified time of the blob."
  CreatedOn: "The date and time at which the blob was created."
  Metadata: "A set of name-value pairs associated with this blob as user-defined metadata."
  TagCount: "the number of tags stored on the blob."
  HttpHeaders: "System properties of the blob."
  SequenceNumber: "The current sequence number for a page blob. This value is null for block blobs or append blobs."
  CommittedBlockCount: "The number of committed blocks present in the blob. This value is null for block blobs or page blobs."
  IsSealed: "If the blob has been sealed. This value is null for block blobs or page blobs."
  LeaseDuration: "Indicates whether the lease is of infinite or fixed duration when the blob or container is leased. This value is null if the blob or container is not leased."
  LeaseState: "Lease state of the blob."
  LeaseStatus: "The current lease status of the blob."
  IsServerEncrypted: "True if the blob data and metadata are completely encrypted using the specified algorithm. Otherwise, the value is set to false (when the blob is unencrypted, or if only parts of the blob/application metadata are encrypted)."
  EncryptionKeySha256: "The SHA-256 hash of the encryption key used to encrypt the blob data and metadata."
  EncryptionScope: "Name of the encryption scope used to encrypt the blob data and metadata."
  AccessType: "Indicates whether data in the container may be accessed publicly and the level of access."
  HasImmutabilityPolicy: "Indicates whether the container has an immutability policy set on it."
  HasLegalHold: "Indicates whether the container has a legal hold."
  DefaultEncryptionScope: "The default encryption scope for the container."
  PreventEncryptionScopeOverride: "Indicates whether the container's default encryption scope can be overridden."
  SignedIdentifiers: "A collection of signed identifiers."
  BlobSize: "Size of the blob."
  BlobType: "The blob's type."
  TransactionalContentHash: "The request may return a CRC64 or MD5 hash for the downloaded range of data."
  ContentRange: "Indicates the range of bytes returned."
  LastAccessedOn: "The date and time at which the blob was last read or written to."
  AccessTier: "The tier of page blob or block blob."
  IsAccessTierInferred: "True if the access tier is not explicitly set on the blob."
  ArchiveStatus: "Indicates if the blob is being rehydrated."
  RehydratePriority: "Priority of rehydrate if the blob is being rehydrated."
  AccessTierChangedOn: "The date and time the tier was changed on the object."
  CopyId: "String identifier for the last attempted Copy Blob operation where this blob was the destination. This value is null if this blob has never been the destination of a copy operation, or if this blob has been modified after a concluded copy operation."
  CopySource: "URL that specifies the source blob or file used in the last attempted copy operation where this blob was the destination blob. This value is null if this blob has never been the destination of a copy operation, or if this blob has been modified after a concluded copy operation."
  CopyStatus: "State of the copy operation identified by the copy ID. Possible values include success, pending, aborted, failed etc. This value is null if this blob has never been the destination of a copy operation, or if this blob has been modified after a concluded copy operation."
  CopyStatusDescription: "Describes the cause of the last fatal or non-fatal copy operation failure. This is not null only when copy status is failed or pending."
  IsIncrementalCopy: "True if the copy operation is incremental copy."
  IncrementalCopyDestinationSnapshot: "Snapshot time of the last successful incremental copy snapshot for this blob."
  CopyProgress: "Contains the number of bytes copied and the total bytes in the source in the last attempted copy operation where this blob was the destination blob."
  CopyCompletedOn: "Conclusion time of the last attempted copy operation where this blob was the destination blob."
  ObjectReplicationDestinationPolicyId: "Only valid when Object Replication is enabled and current blob is the destination."
  ObjectReplicationSourceProperties: "Only valid when Object Replication is enabled and current blob is the source."
  VersionId: "A string value that uniquely identifies the blob. This value is null if Blob Versioning is not enabled."
  IsCurrentVersion: "Indicates if this is the current version of the blob. This value is null if Blob Versioning is not enabled."
  AppendOffset: "The offset at which the block was committed."
  LeaseId: "Uniquely identifies a container's or blob's lease."

request_version_timeout_package: &REQUEST_VERSION_TIMEOUT_PACKAGE
  - [add_header_code, "x-ms-version", *ApiVersion]
  - [add_query_code, "timeout", Timeout]

request_encryption_package: &REQUEST_ENCRYPTION_HEADER_PACKAGE
  - [add_header_code, "x-ms-encryption-key", EncryptionKey]
  - [add_header_code, "x-ms-encryption-key-sha256", EncryptionKeySha256]
  - [add_header_code, "x-ms-encryption-algorithm", EncryptionAlgorithm]
  - [add_header_code, "x-ms-encryption-scope", EncryptionScope, ignorable]

response_encryption_package: &RESPONSE_ENCRYPTION_HEADER_PACKAGE
  - [get_header_code, "x-ms-server-encrypted", IsServerEncrypted]
  - [get_header_code, "x-ms-encryption-key-sha256", EncryptionKeySha256]
  - [get_header_code, "x-ms-encryption-scope", EncryptionScope]

response_request_encryption_package: &RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE
  - [get_header_code, "x-ms-request-server-encrypted", IsServerEncrypted]
  - [get_header_code, "x-ms-encryption-key-sha256", EncryptionKeySha256]
  - [get_header_code, "x-ms-encryption-scope", EncryptionScope]

response_etag_last_modified_package: &RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
  - [get_header_code, "ETag", ETag]
  - [get_header_code, "Last-Modified", LastModified]

request_checksum_package: &REQUEST_CHECKSUM_HEADER_PACKAGE
  - [add_content_hash_code, TransactionalContentHash]

request_source_checksum_package: &REQUEST_SOURCE_CHECKSUM_HEADER_PACKAGE
  - [add_source_content_hash_code, TransactionalContentHash]

response_checksum_package: &RESPONSE_CHECKSUM_HEADER_PACKAGE
  - [get_content_hash_code, TransactionalContentHash]

request_mime_package: &REQUEST_MIME_HEADER_PACKAGE
  - [add_header_code, "x-ms-blob-content-type", HttpHeaders.ContentType, optional]
  - [add_header_code, "x-ms-blob-content-encoding", HttpHeaders.ContentEncoding, optional]
  - [add_header_code, "x-ms-blob-content-language", HttpHeaders.ContentLanguage, optional]
  - [add_header_code, "x-ms-blob-cache-control", HttpHeaders.CacheControl, optional]
  - [add_header_code, "x-ms-blob-content-md5", HttpHeaders.ContentHash.Value, optional]
  - [add_header_code, "x-ms-blob-content-disposition", HttpHeaders.ContentDisposition, optional]

response_mime_package: &RESPONSE_MIME_HEADER_PACKAGE
  - [get_header_code, "Content-Type", HttpHeaders.ContentType, optional]
  - [get_header_code, "Content-Encoding", HttpHeaders.ContentEncoding, optional]
  - [get_header_code, "Content-Language", HttpHeaders.ContentLanguage, optional]
  - [get_header_code, "Cache-Control", HttpHeaders.CacheControl, optional]
  - [get_header_code, "Content-MD5", HttpHeaders.ContentHash.Value, optional]
  - [get_header_code, "x-ms-blob-content-md5", HttpHeaders.ContentHash.Value, optional]
  - [get_header_code, "Content-Disposition", HttpHeaders.ContentDisposition, optional]

response_lease_package: &RESPONSE_LEASE_HEADER_PACKAGE
  - [get_header_code, "x-ms-lease-status", LeaseStatus]
  - [get_header_code, "x-ms-lease-state", LeaseState]
  - [get_header_code, "x-ms-lease-duration", LeaseDuration]

request_conditional_headers_package: &REQUEST_CONDITIONAL_HEADER_PACKAGE
  - [add_header_code, "If-Modified-Since", IfModifiedSince]
  - [add_header_code, "If-Unmodified-Since", IfUnmodifiedSince, ignorable]
  - [add_header_code, "If-Match", IfMatch, ignorable, optional]
  - [add_header_code, "If-None-Match", IfNoneMatch, ignorable, optional]
  - [add_header_code, "x-ms-if-tags", IfTags, ignorable]

request_source_conditional_headers_package: &REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
  - [add_header_code, "x-ms-source-if-modified-since", SourceIfModifiedSince]
  - [add_header_code, "x-ms-source-if-unmodified-since", SourceIfUnmodifiedSince]
  - [add_header_code, "x-ms-source-if-match", SourceIfMatch, optional]
  - [add_header_code, "x-ms-source-if-none-match", SourceIfNoneMatch, optional]

Services:
  - Service:
    - ListBlobContainers:
        http_method: Get
        http_status_code: 200
        return_type:
          ListBlobContainersResultInternal:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - Prefix: std::string
            - ContinuationToken: std::string, nullable
            - Items: std::vector<BlobContainerItem>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.NextMarker, ContinuationToken],
              [start_tag, EnumerationResults.Containers.Container, Items],
            ]
        options:
          ListBlobContainersOptions:
            - BasicRequestOptions: inline
            - Prefix: std::string, nullable
            - ContinuationToken: std::string, nullable
            - MaxResults: int32_t, nullable
            - Include: ListBlobContainersIncludeFlags = ListBlobContainersIncludeFlags::None
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix]
          - [add_query_code, "marker", ContinuationToken]
          - [add_query_code, "maxresults", MaxResults]
          - [add_query_code, "include", Include, optional]
        response_action:
          - [get_xml_body_code]

    - GetUserDelegationKey:
        http_method: Post
        http_status_code: 200
        return_type:
          UserDelegationKey:  # A user delegation key that can be used to sign user delegation SAS.
            - SignedObjectId: std::string  # The immutable identifier for an object in the Microsoft identity system.
            - SignedTenantId: std::string  # A GUID that represents the Azure AD tenant that the user is from.
            - SignedStartsOn: Azure::DateTime(ISO8601)  # The start time of the user delegation key.
            - SignedExpiresOn: Azure::DateTime(ISO8601)  # The expiry time of the user delegation key.
            - SignedService: std::string  # The service of the user delegation key can be used for.
            - SignedVersion: std::string  # The rest api version used to get user delegation key.
            - Value: std::string  # The signature of the user delegation key.
            - from_xml: [
              [text, UserDelegationKey.SignedOid, SignedObjectId],
              [text, UserDelegationKey.SignedTid, SignedTenantId],
              [text, UserDelegationKey.SignedStart, SignedStartsOn],
              [text, UserDelegationKey.SignedExpiry, SignedExpiresOn],
              [text, UserDelegationKey.SignedService, SignedService],
              [text, UserDelegationKey.SignedVersion, SignedVersion],
              [text, UserDelegationKey.Value, Value],
            ]
        options:
          GetUserDelegationKeyOptions:
            - BasicRequestOptions: inline
            - StartsOn: Azure::DateTime(ISO8601t)
            - ExpiresOn: Azure::DateTime(ISO8601t)
            - to_xml: [
              [tag, KeyInfo.Start, StartsOn],
              [tag, KeyInfo.Expiry, ExpiresOn],
            ]
        request_action:
          - [add_xml_body_code]
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "userdelegationkey"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_xml_body_code]

    - GetProperties:
        http_method: Get
        http_status_code: 200
        return_type: BlobServiceProperties
        options:
          GetServicePropertiesOptions:
            - BasicRequestOptions: inline
        request_action:
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_xml_body_code]

    - SetProperties:
        http_method: Put
        http_status_code: 202
        return_type:
          SetServicePropertiesResult:  # Response type for #Azure::Storage::Blobs::BlobServiceClient::SetProperties.
            - BasicResponse: inline
        options:
          SetServicePropertiesOptions:
            - BasicRequestOptions: inline
            - Properties: BlobServiceProperties
            - to_xml: [
              [tag, StorageServiceProperties, Properties],
            ]
        request_action:
          - [add_xml_body_code]
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action: {}

    - GetAccountInfo:
        http_method: Head
        http_status_code: 200
        return_type:
          AccountInfo:  # Storage account information.
            - SkuName: SkuName  # The SKU name of the storage account. See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for more information.
            - AccountKind: AccountKind  # The account kind of the storage account. See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for more information.
            - IsHierarchicalNamespaceEnabled: bool = false  # Indicates if the account has a hierarchical namespace enabled.
        options:
          GetAccountInfoOptions:
            - BasicRequestOptions: inline
        request_action:
          - [add_query_code, "restype", "account"]
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_header_code, "x-ms-sku-name", SkuName]
          - [get_header_code, "x-ms-account-kind", AccountKind]
          - [get_header_code, "x-ms-is-hns-enabled", IsHierarchicalNamespaceEnabled]

    - GetStatistics:
        http_method: Get
        http_status_code: 200
        return_type:
          ServiceStatistics:  # Statistics for the storage service.
            - GeoReplication: GeoReplication  # Geo-replication information for the secondary storage endpoint.
            - from_xml: [
              [start_tag, StorageServiceStats.GeoReplication, GeoReplication]
            ]
        options:
          GetServiceStatisticsOptions:
            - BasicRequestOptions: inline
        request_action:
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "stats"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_xml_body_code]

    - FindBlobsByTags:
        http_method: Get
        http_status_code: 200
        return_type:
          FindBlobsByTagsResultInternal:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - ContinuationToken: std::string, nullable
            - Items: std::vector<TaggedBlobItem>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [text, EnumerationResults.NextMarker, ContinuationToken],
              [start_tag, EnumerationResults.Blobs.Blob, Items],
            ]
        options:
          FindBlobsByTagsOptions:
            - BasicRequestOptions: inline
            - Where: std::string
            - ContinuationToken: std::string, nullable
            - MaxResults: int32_t, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "blobs"]
          - [add_query_code, "where", Where]
          - [add_query_code, "marker", ContinuationToken]
          - [add_query_code, "maxresults", MaxResults]
        response_action:
          - [get_xml_body_code]


  - BlobContainer:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type:
          CreateBlobContainerResult:  # Response type for #Azure::Storage::Blobs::BlobContainerClient::Create.
            - BasicResponse: inline
            - Created: bool = true  # Indicates if the container was successfully created in this operation.
            - BlobContainerInfo: inline
        options:
          CreateBlobContainerOptions:
            - BasicRequestOptions: inline
            - AccessType: PublicAccessType = PublicAccessType::None
            - Metadata: Metadata
            - DefaultEncryptionScope: std::string, nullable
            - PreventEncryptionScopeOverride: bool, nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-blob-public-access", AccessType, optional]
          - [add_header_code, "x-ms-default-encryption-scope", DefaultEncryptionScope]
          - [add_header_code, "x-ms-deny-encryption-scope-override", PreventEncryptionScopeOverride]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - Delete:
        http_method: Delete
        http_status_code: 202
        return_type:
          DeleteBlobContainerResult:  # Response type for #Azure::Storage::Blobs::BlobContainerClient::Delete.
            - BasicResponse: inline
            - Deleted: bool = true  # Indicates if the container was successfully deleted in this operation.
        options:
          DeleteBlobContainerOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string, nullable
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
            - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action: {}

    - Undelete:
        http_method: Put
        http_status_code: 201
        return_type:
          UndeleteBlobContainerResultInternal:
            - BasicResponse: inline
        options:
          UndeleteBlobContainerOptions:
            - BasicRequestOptions: inline
            - DeletedBlobContainerName: std::string
            - DeletedBlobContainerVersion: std::string
        request_action:
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "undelete"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-deleted-container-name", DeletedBlobContainerName]
          - [add_header_code, "x-ms-deleted-container-version", DeletedBlobContainerVersion]
        response_action: {}

    - GetProperties:
        http_method: Head
        http_status_code: 200
        return_type:
          BlobContainerProperties:  # Properties of a blob container.
            - BlobContainerItemWithoutName: inline
        options:
          GetBlobContainerPropertiesOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string, nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - [get_header_code, "x-ms-blob-public-access", AccessType, optional]
          - [get_header_code, "x-ms-has-immutability-policy", HasImmutabilityPolicy]
          - [get_header_code, "x-ms-has-legal-hold", HasLegalHold]
          - *RESPONSE_LEASE_HEADER_PACKAGE
          - [get_header_code, "x-ms-default-encryption-scope", DefaultEncryptionScope]
          - [get_header_code, "x-ms-deny-encryption-scope-override", PreventEncryptionScopeOverride]

    - SetMetadata:
        http_method: Put
        http_status_code: 200
        return_type:
          SetBlobContainerMetadataResult:  # Response type for #Azure::Storage::Blobs::BlobContainerClient::SetMetadata.
            - BasicResponse: inline
            - BlobContainerInfo: inline
        options:
          SetBlobContainerMetadataOptions:
            - BasicRequestOptions: inline
            - Metadata: Metadata
            - LeaseId: std::string, nullable
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "metadata"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - ListBlobs:
        http_method: Get
        http_status_code: 200
        return_type:
          ListBlobsResultInternal:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - BlobContainerName: std::string
            - Prefix: std::string
            - ContinuationToken: std::string, nullable
            - Items: std::vector<BlobItem>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [attribute, EnumerationResults, ContainerName, BlobContainerName],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.NextMarker, ContinuationToken],
              [start_tag, EnumerationResults.Blobs.Blob, Items],
            ]
        options:
          ListBlobsOptions:
            - BasicRequestOptions: inline
            - Prefix: std::string, nullable
            - ContinuationToken: std::string, nullable
            - MaxResults: int32_t, nullable
            - Include: ListBlobsIncludeFlags = ListBlobsIncludeFlags::None
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix]
          - [add_query_code, "marker", ContinuationToken]
          - [add_query_code, "maxresults", MaxResults]
          - [add_query_code, "include", Include, optional]
        response_action:
          - [get_xml_body_code]

    - ListBlobsByHierarchy:
        http_method: Get
        http_status_code: 200
        return_type:
          ListBlobsByHierarchyResultInternal:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - BlobContainerName: std::string
            - Prefix: std::string
            - Delimiter: std::string
            - ContinuationToken: std::string, nullable
            - Items: std::vector<BlobItem>
            - BlobPrefixes: std::vector<std::string>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [attribute, EnumerationResults, ContainerName, BlobContainerName],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.Delimiter, Delimiter],
              [text, EnumerationResults.NextMarker, ContinuationToken],
              [start_tag, EnumerationResults.Blobs.Blob, Items],
              [text, EnumerationResults.Blobs.BlobPrefix.Name, BlobPrefixes]
            ]
        options:
          ListBlobsByHierarchyOptions:
            - BasicRequestOptions: inline
            - Prefix: std::string, nullable
            - Delimiter: std::string, nullable
            - ContinuationToken: std::string, nullable
            - MaxResults: int32_t, nullable
            - Include: ListBlobsIncludeFlags = ListBlobsIncludeFlags::None
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix]
          - [add_query_code, "delimiter", Delimiter]
          - [add_query_code, "marker", ContinuationToken]
          - [add_query_code, "maxresults", MaxResults]
          - [add_query_code, "include", Include, optional]
        response_action:
          - [get_xml_body_code]

    - GetAccessPolicy:
        http_method: Get
        http_status_code: 200
        return_type: BlobContainerAccessPolicy
        options:
          GetBlobContainerAccessPolicyOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "acl"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
        response_action:
          - [get_header_code, "x-ms-blob-public-access", AccessType, optional]
          - [get_xml_body_code]

    - SetAccessPolicy:
        http_method: Put
        http_status_code: 200
        return_type:
          SetBlobContainerAccessPolicyResult:  # Response type for #Azure::Storage::Blobs::BlobContainerClient::SetAccessPolicy.
            - BasicResponse: inline
            - BlobContainerInfo: inline
        options:
          SetBlobContainerAccessPolicyOptions:
            - BasicRequestOptions: inline
            - AccessType: PublicAccessType = PublicAccessType::None
            - LeaseId: std::string, nullable
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
            - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
            - SignedIdentifiers: std::vector<SignedIdentifier>
            - to_xml: [
                [tag, SignedIdentifiers, SignedIdentifiers],
              ]
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "acl"]
          - [add_header_code, "x-ms-blob-public-access", AccessType, optional]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - [add_xml_body_code]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - AcquireLease:
        http_method: Put
        http_status_code: 201
        return_type:
          AcquireBlobContainerLeaseResultInternal:
            - BasicResponse: inline
            - BlobLease: inline
        options:
          AcquireBlobContainerLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseDuration: std::chrono::seconds
            - ProposedLeaseId: std::string, nullable
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
            - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "acquire"]
          - [add_header_code, "x-ms-lease-duration", LeaseDuration]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - RenewLease:
        http_method: Put
        http_status_code: 200
        return_type:
          RenewBlobContainerLeaseResultInternal:
            - BasicResponse: inline
            - BlobLease: inline
        options:
          RenewBlobContainerLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
            - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "renew"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ChangeLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ChangeBlobContainerLeaseResultInternal:
            - BasicResponse: inline
            - BlobLease: inline
        options:
          ChangeBlobContainerLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string
            - ProposedLeaseId: std::string
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
            - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "change"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ReleaseLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ReleaseBlobContainerLeaseResultInternal:
            - BasicResponse: inline
            - BlobContainerInfo: inline
        options:
          ReleaseBlobContainerLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
            - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "release"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - BreakLease:
        http_method: Put
        http_status_code: 202
        return_type:
          BreakBlobContainerLeaseResultInternal:
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - LeaseTime: int32_t = 0  # Approximate time remaining in the lease period in seconds.
        options:
          BreakBlobContainerLeaseOptions:
            - BasicRequestOptions: inline
            - BreakPeriod: std::chrono::seconds, nullable
            - IfModifiedSince: Azure::DateTime(RFC1123), nullable
            - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "break"]
          - [add_header_code, "x-ms-lease-break-period", BreakPeriod]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-time", LeaseTime]


  - Blob:
    - Download:
        http_method: Get
        http_status_code: [200, 206]
        return_type:
          DownloadBlobResult:  # Response type for #Azure::Storage::Blobs::BlobClient::Download.
            - BodiedResponse: inline
            - ContentRange: Azure::Core::Http::HttpRange
            - BlobSize: int64_t = 0
            - BlobType: BlobType
            - TransactionalContentHash: ContentHash, nullable
            - Details: DownloadBlobDetails  # Detailed information of the downloaded blob.
        options:
          DownloadBlobOptions:
            - BasicRequestOptions: inline
            - Range: Azure::Core::Http::HttpRange, nullable
            - RangeHashAlgorithm: HashAlgorithm, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - LeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_hash_algorithm_code, RangeHashAlgorithm]
        response_action:
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_body_code, BodyStream]
          - [get_header_code, "x-ms-blob-type", BlobType]
          - [get_content_range_code, "Content-Range", ContentRange]
          - [get_content_range_code, "Content-Range", BlobSize]
          - [get_header_code, "ETag", Details.ETag]
          - [get_header_code, "Last-Modified", Details.LastModified]
          - [get_header_code, "Content-Type", Details.HttpHeaders.ContentType, optional]
          - [get_header_code, "Content-Encoding", Details.HttpHeaders.ContentEncoding, optional]
          - [get_header_code, "Content-Language", Details.HttpHeaders.ContentLanguage, optional]
          - [get_header_code, "Cache-Control", Details.HttpHeaders.CacheControl, optional]
          - [get_header_code, "Content-MD5", Details.HttpHeaders.ContentHash.Value, optional, on_status(200)]
          - [get_header_code, "x-ms-blob-content-md5", Details.HttpHeaders.ContentHash.Value, optional]
          - [get_header_code, "Content-Disposition", Details.HttpHeaders.ContentDisposition, optional]
          - [get_metadata_code, "x-ms-meta-", Details.Metadata, optional]
          - [get_header_code, "x-ms-server-encrypted", Details.IsServerEncrypted]
          - [get_header_code, "x-ms-encryption-key-sha256", Details.EncryptionKeySha256]
          - [get_header_code, "x-ms-encryption-scope", Details.EncryptionScope]
          - [get_header_code, "x-ms-lease-status", Details.LeaseStatus]
          - [get_header_code, "x-ms-lease-state", Details.LeaseState]
          - [get_header_code, "x-ms-lease-duration", Details.LeaseDuration]
          - [get_header_code, "x-ms-creation-time", Details.CreatedOn]
          - [get_header_code, "x-ms-expiry-time", Details.ExpiresOn]
          - [get_header_code, "x-ms-last-access-time", Details.LastAccessedOn]
          - [get_header_code, "x-ms-blob-sequence-number", Details.SequenceNumber]
          - [get_header_code, "x-ms-blob-committed-block-count", Details.CommittedBlockCount]
          - [get_header_code, "x-ms-blob-sealed", Details.IsSealed]
          - [get_header_code, "x-ms-or-policy-id", Details.ObjectReplicationDestinationPolicyId]
          - [get_or_code, "x-ms-or-", Details.ObjectReplicationSourceProperties]
          - [get_header_code, "x-ms-tag-count", Details.TagCount]
          - [get_header_code, "x-ms-copy-id", Details.CopyId]
          - [get_header_code, "x-ms-copy-source", Details.CopySource]
          - [get_header_code, "x-ms-copy-status", Details.CopyStatus]
          - [get_header_code, "x-ms-copy-status-description", Details.CopyStatusDescription]
          - [get_header_code, "x-ms-copy-progress", Details.CopyProgress]
          - [get_header_code, "x-ms-copy-completion-time", Details.CopyCompletedOn]
          - [get_header_code, "x-ms-version-id", Details.VersionId]
          - [get_header_code, "x-ms-is-current-version", Details.IsCurrentVersion]

    - Delete:
        separate_functions: true
        http_method: Delete
        http_status_code: 202
        return_type:
          DeleteBlobResult:  # Response type for #Azure::Storage::Blobs::BlobClient::Delete.
            - BasicResponse: inline
            - Deleted: bool = true  # Indicates if the blob was successfully deleted in this operation.
        options:
          DeleteBlobOptions:
            - BasicRequestOptions: inline
            - DeleteSnapshots: DeleteSnapshotsOption, nullable
            - LeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-delete-snapshots", DeleteSnapshots]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action: {}

    - ScheduleDeletion:
        http_method: Put
        http_status_code: 200
        return_type:
          SetBlobExpiryResult:  # Response type for #Azure::Storage::Files::DataLake::DataLakeFileClient::ScheduleDeletion.
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
        options:
          SetBlobExpiryOptions:
            - BasicRequestOptions: inline
            - ExpiryOrigin: ScheduleBlobExpiryOriginType
            - ExpiryTime: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "expiry"]
          - [add_header_code, "x-ms-expiry-option", ExpiryOrigin]
          - [add_header_code, "x-ms-expiry-time", ExpiryTime]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - Undelete:
        http_method: Put
        http_status_code: 200
        return_type:
          UndeleteBlobResult:  # Response type for #Azure::Storage::Blobs::BlobClient::Undelete.
            - BasicResponse: inline
        options:
          UndeleteBlobOptions:
            - BasicRequestOptions: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "undelete"]
        response_action: {}

    - GetProperties:
        http_method: Head
        http_status_code: 200
        return_type: BlobProperties
        options:
          GetBlobPropertiesOptions:
            - BasicRequestOptions: inline
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - LeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-creation-time", CreatedOn]
          - [get_header_code, "x-ms-expiry-time", ExpiresOn]
          - [get_header_code, "x-ms-last-access-time", LastAccessedOn]
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - [get_header_code, "x-ms-blob-type", BlobType]
          - *RESPONSE_LEASE_HEADER_PACKAGE
          - [get_header_code, "Content-Length", BlobSize]
          - *RESPONSE_MIME_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - [get_header_code, "x-ms-blob-sealed", IsSealed]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE
          - [get_header_code, "x-ms-access-tier", AccessTier]
          - [get_header_code, "x-ms-access-tier-inferred", IsAccessTierInferred]
          - [get_header_code, "x-ms-archive-status", ArchiveStatus]
          - [get_header_code, "x-ms-rehydrate-priority", RehydratePriority]
          - [get_header_code, "x-ms-access-tier-change-time", AccessTierChangedOn]
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-source", CopySource]
          - [get_header_code, "x-ms-copy-status", CopyStatus]
          - [get_header_code, "x-ms-copy-status-description", CopyStatusDescription]
          - [get_header_code, "x-ms-incremental-copy", IsIncrementalCopy]
          - [get_header_code, "x-ms-copy-destination-snapshot", IncrementalCopyDestinationSnapshot]
          - [get_header_code, "x-ms-copy-progress", CopyProgress]
          - [get_header_code, "x-ms-copy-completion-time", CopyCompletedOn]
          - [get_header_code, "x-ms-or-policy-id", ObjectReplicationDestinationPolicyId]
          - [get_or_code, "x-ms-or-", ObjectReplicationSourceProperties]
          - [get_header_code, "x-ms-tag-count", TagCount]
          - [get_header_code, "x-ms-version-id", VersionId]
          - [get_header_code, "x-ms-is-current-version", IsCurrentVersion]

    - SetHttpHeaders:
        http_method: Put
        http_status_code: 200
        return_type:
          SetBlobHttpHeadersResult:  # Response type for #Azure::Storage::Blobs::BlobClient::SetHttpHeaders.
            - BasicResponse: inline
            - BlobInfo: inline
        options:
          SetBlobHttpHeadersOptions:
            - BasicRequestOptions: inline
            - HttpHeaders: BlobHttpHeaders
            - LeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]

    - SetMetadata:
        http_method: Put
        http_status_code: 200
        return_type:
          SetBlobMetadataResult:  # Response type for #Azure::Storage::Blobs::BlobClient::SetMetadata.
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
        options:
          SetBlobMetadataOptions:
            - BasicRequestOptions: inline
            - Metadata: Metadata
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - LeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "metadata"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - SetAccessTier:
        separate_functions: true
        http_method: Put
        http_status_code: [200, 202]
        return_type:
          SetBlobAccessTierResult:  # Response type for #Azure::Storage::Blobs::BlobClient::SetAccessTier.
            - BasicResponse: inline
        options:
          SetBlobAccessTierOptions:
            - BasicRequestOptions: inline
            - AccessTier: AccessTier
            - RehydratePriority: RehydratePriority, nullable
            - LeaseId: std::string, nullable
            - IfTags: std::string, nullable
        request_action:
          - [add_query_code, "comp", "tier"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-access-tier", AccessTier]
          - [add_header_code, "x-ms-rehydrate-priority", RehydratePriority]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-tags", IfTags]
        response_action: {}

    - StartCopyFromUri:
        http_method: Put
        http_status_code: 202
        return_type:
          StartBlobCopyFromUriResultInternal:
            - BasicResponse: inline
            - BlobCopyInfo: inline
        options:
          StartBlobCopyFromUriOptions:
            - BasicRequestOptions: inline
            - Metadata: Metadata
            - SourceUri: std::string
            - LeaseId: std::string, nullable
            - SourceLeaseId: std::string, nullable
            - AccessTier: AccessTier, nullable
            - RehydratePriority: RehydratePriority, nullable
            - BlobRequestConditionalHeaders: inline
            - BlobRequestSourceConditionalHeaders: inline
            - SourceIfTags: std::string, nullable
            - ShouldSealDestination: bool, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-source-lease-id", SourceLeaseId]
          - [add_header_code, "x-ms-access-tier", AccessTier]
          - [add_header_code, "x-ms-rehydrate-priority", RehydratePriority]
          - [add_header_code, "x-ms-seal-blob", ShouldSealDestination]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - *REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
          - [add_header_code, "x-ms-source-if-tags", SourceIfTags]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-status", CopyStatus]
          - [get_header_code, "x-ms-version-id", VersionId]

    - AbortCopyFromUri:
        http_method: Put
        http_status_code: 204
        return_type:
          AbortBlobCopyFromUriResult:  # Response type for #Azure::Storage::Blobs::BlobClient::AbortCopy.
            - BasicResponse: inline
        options:
          AbortBlobCopyFromUriOptions:
            - BasicRequestOptions: inline
            - CopyId: std::string
            - LeaseId: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "copy"]
          - [add_query_code, "copyid", CopyId]
          - [add_header_code, "x-ms-copy-action", "abort"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
        response_action: {}

    - CreateSnapshot:
        http_method: Put
        http_status_code: 201
        return_type:
          CreateBlobSnapshotResult: # Response type for #Azure::Storage::Blobs::BlobClient::CreateSnapshot.
            - BasicResponse: inline
            - Snapshot: std::string
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - VersionId: std::string, nullable
            - BlobResponseEncryptionOptions: inline
        options:
          CreateBlobSnapshotOptions:
            - BasicRequestOptions: inline
            - Metadata: Metadata
            - LeaseId: std::string, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "snapshot"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [get_header_code, "x-ms-snapshot", Snapshot]
          - [get_header_code, "x-ms-version-id", VersionId]

    - GetTags:
        http_method: Get
        http_status_code: 200
        return_type:
          GetBlobTagsResultInternal:
            - BasicResponse: inline
            - Tags: std::map<std::string, std::string>
            - from_xml: [
              [start_tag, Tags.TagSet, Tags],
            ]
        options:
          GetBlobTagsOptions:
            - BasicRequestOptions: inline
            - IfTags: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "tags"]
          - [add_header_code, "x-ms-if-tags", IfTags]
        response_action:
          - [get_xml_body_code]

    - SetTags:
        http_method: Put
        http_status_code: 204
        return_type:
          SetBlobTagsResult:  # Response type for #Azure::Storage::Blobs::BlobClient::SetTags.
            - BasicResponse: inline
        options:
          SetBlobTagsOptions:
            - BasicRequestOptions: inline
            - Tags: std::map<std::string, std::string>
            - IfTags: std::string, nullable
            - to_xml: [
              [tag, Tags.TagSet, Tags],
            ]
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "tags"]
          - [add_header_code, "Content-Type", "application/xml; charset=UTF-8"]
          - [add_header_code, "x-ms-if-tags", IfTags]
          - [add_xml_body_code]
        response_action: {}

    - AcquireLease:
        http_method: Put
        http_status_code: 201
        return_type:
          AcquireBlobLeaseResultInternal:
            - BasicResponse: inline
            - BlobLease: inline
        options:
          AcquireBlobLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseDuration: std::chrono::seconds
            - ProposedLeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "acquire"]
          - [add_header_code, "x-ms-lease-duration", LeaseDuration]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - RenewLease:
        http_method: Put
        http_status_code: 200
        return_type:
          RenewBlobLeaseResultInternal:
            - BasicResponse: inline
            - BlobLease: inline
        options:
          RenewBlobLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "renew"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ChangeLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ChangeBlobLeaseResultInternal:
            - BasicResponse: inline
            - BlobLease: inline
        options:
          ChangeBlobLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string
            - ProposedLeaseId: std::string
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "change"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ReleaseLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ReleaseBlobLeaseResultInternal:
            - BasicResponse: inline
            - BlobInfo: inline
        options:
          ReleaseBlobLeaseOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "release"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - BreakLease:
        http_method: Put
        http_status_code: 202
        return_type:
          BreakBlobLeaseResultInternal:
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - LeaseTime: int32_t = 0  # Approximate time remaining in the lease period in seconds.
        options:
          BreakBlobLeaseOptions:
            - BasicRequestOptions: inline
            - BreakPeriod: std::chrono::seconds, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "break"]
          - [add_header_code, "x-ms-lease-break-period", BreakPeriod]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-time", LeaseTime]


  - BlockBlob:
    - Upload:
        http_method: Put
        http_status_code: 201
        return_type:
          UploadBlockBlobResult:  # Response type for #Azure::Storage::Blobs::BlockBlobClient::Upload.
            - BasicResponse: inline
            - BlobContentInfo: inline
            - TransactionalContentHash: ContentHash, nullable
        options:
          UploadBlockBlobOptions:
            - BodiedRequestOptions: inline
            - TransactionalContentHash: ContentHash, nullable
            - HttpHeaders: BlobHttpHeaders
            - Metadata: Metadata
            - LeaseId: std::string, nullable
            - AccessTier: AccessTier, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_body_code]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-type", "BlockBlob"]
          - [add_header_code, "x-ms-access-tier", AccessTier]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - StageBlock:
        http_method: Put
        http_status_code: 201
        return_type:
          StageBlockResult:  # Response type for #Azure::Storage::Blobs::BlockBlobClient::StageBlock.
            - BasicResponse: inline
            - BlockInfo: inline
        options:
          StageBlockOptions:
            - BodiedRequestOptions: inline
            - BlockId: std::string
            - TransactionalContentHash: ContentHash, nullable
            - LeaseId: std::string, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "block"]
          - [add_query_code, "blockid", BlockId]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
        response_action:
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - StageBlockFromUri:
        http_method: Put
        http_status_code: 201
        return_type:
          StageBlockFromUriResult:  # Response type for #Azure::Storage::Blobs::BlockBlobClient::StageBlockFromUri.
            - BasicResponse: inline
            - BlockInfo: inline
        options:
          StageBlockFromUriOptions:
            - BasicRequestOptions: inline
            - BlockId: std::string
            - SourceUri: std::string
            - SourceRange: Azure::Core::Http::HttpRange, nullable
            - TransactionalContentHash: ContentHash, nullable
            - LeaseId: std::string, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestSourceConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "block"]
          - [add_query_code, "blockid", BlockId]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source_range", SourceRange]
          - *REQUEST_SOURCE_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - CommitBlockList:
        http_method: Put
        http_status_code: 201
        return_type:
          CommitBlockListResult:  # Response type for #Azure::Storage::Blobs::BlockBlobClient::CommitBlockList.
            - BasicResponse: inline
            - BlobContentInfo: inline
            - TransactionalContentHash: ContentHash, nullable
        options:
          CommitBlockListOptions:
            - BasicRequestOptions: inline
            - BlockList: std::vector<std::pair<BlockType, std::string>>
            - HttpHeaders: BlobHttpHeaders
            - Metadata: Metadata
            - LeaseId: std::string, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
            - AccessTier: AccessTier, nullable
            - to_xml: [
              [tag, BlockList, BlockList]
            ]
        request_action:
          - [add_xml_body_code]
          - [add_query_code, "comp", "blocklist"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_header_code, "x-ms-access-tier", AccessTier]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - GetBlockList:
        http_method: Get
        http_status_code: 200
        options:
          GetBlockListOptions:
            - BasicRequestOptions: inline
            - ListType: BlockListType = BlockListType::Committed
            - LeaseId: std::string, nullable
            - IfTags: std::string, nullable
        return_type:
          GetBlockListResult:  # Response type for #Azure::Storage::Blobs::BlockBlobClient::GetBlockList.
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - BlobSize: int64_t = 0
            - CommittedBlocks: std::vector<BlobBlock>  # Collection of committed blocks.
            - UncommittedBlocks: std::vector<BlobBlock>  # Collection of uncommitted blocks.
            - from_xml: [
              [start_tag, BlockList.CommittedBlocks.Block, CommittedBlocks],
              [start_tag, BlockList.UncommittedBlocks.Block, UncommittedBlocks],
            ]
        request_action:
          - [add_query_code, "comp", "blocklist"]
          - [add_query_code, "blocklisttype", ListType]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-tags", IfTags]
        response_action:
          - [get_xml_body_code]
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-content-length", BlobSize]

  - PageBlob:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type:
          CreatePageBlobResult:  # Response type for #Azure::Storage::Blobs::PageBlobClient::Create.
            - BasicResponse: inline
            - Created: bool = true  # Indicates if the page blob was successfully created in this operation.
            - BlobContentInfo: inline
            - SequenceNumber: int64_t, nullable
        options:
          CreatePageBlobOptions:
            - BasicRequestOptions: inline
            - BlobSize: int64_t = -1
            - SequenceNumber: int64_t, nullable
            - HttpHeaders: BlobHttpHeaders
            - Metadata: Metadata
            - LeaseId: std::string, nullable
            - AccessTier: AccessTier, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-type", "PageBlob"]
          - [add_header_code, "x-ms-blob-content-length", BlobSize]
          - [add_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - [add_header_code, "x-ms-access-tier", AccessTier]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - UploadPages:
        http_method: Put
        http_status_code: 201
        options:
          UploadPageBlobPagesOptions:
            - BodiedRequestOptions: inline
            - Range: Azure::Core::Http::HttpRange
            - TransactionalContentHash: ContentHash, nullable
            - LeaseId: std::string, nullable
            - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
            - IfSequenceNumberLessThan: int64_t, nullable
            - IfSequenceNumberEqualTo: int64_t, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        return_type:
          UploadPagesResult:  # Response type for #Azure::Storage::Blobs::PageBlobClient::UploadPages.
            - BasicResponse: inline
            - PageInfo: inline
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-page-write", "update"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - UploadPagesFromUri:
        http_method: Put
        http_status_code: 201
        options:
          UploadPageBlobPagesFromUriOptions:
            - BasicRequestOptions: inline
            - SourceUri: std::string
            - SourceRange: Azure::Core::Http::HttpRange
            - Range: Azure::Core::Http::HttpRange
            - TransactionalContentHash: ContentHash, nullable
            - LeaseId: std::string, nullable
            - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
            - IfSequenceNumberLessThan: int64_t, nullable
            - IfSequenceNumberEqualTo: int64_t, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        return_type:
          UploadPagesFromUriResult:  # Response type for #Azure::Storage::Blobs::PageBlobClient::UploadPagesFromUri.
            - BasicResponse: inline
            - PageInfo: inline
        request_action:
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source-range", SourceRange]
          - *REQUEST_SOURCE_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-page-write", "update"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - ClearPages:
        http_method: Put
        http_status_code: 201
        options:
          ClearPageBlobPagesOptions:
            - BasicRequestOptions: inline
            - Range: Azure::Core::Http::HttpRange
            - LeaseId: std::string, nullable
            - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
            - IfSequenceNumberLessThan: int64_t, nullable
            - IfSequenceNumberEqualTo: int64_t, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        return_type:
          ClearPagesResult:  # Response type for #Azure::Storage::Blobs::PageBlobClient::ClearPages.
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - SequenceNumber: int64_t = 0
        request_action:
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-page-write", "clear"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]

    - Resize:
        http_method: Put
        http_status_code: 200
        return_type:
          ResizePageBlobResult:  # Azure::Storage::Blobs::PageBlobClient::Resize.
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - SequenceNumber: int64_t = 0
        options:
          ResizePageBlobOptions:
            - BasicRequestOptions: inline
            - BlobSize: int64_t = -1
            - LeaseId: std::string, nullable
            - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
            - IfSequenceNumberLessThan: int64_t, nullable
            - IfSequenceNumberEqualTo: int64_t, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-blob-content-length", BlobSize]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]

    - GetPageRanges:
        http_method: Get
        http_status_code: 200
        return_type:
          GetPageRangesResultInternal:
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - BlobSize: int64_t = 0
            - PageRanges: std::vector<Azure::Core::Http::HttpRange>
            - ClearRanges: std::vector<Azure::Core::Http::HttpRange>
            - from_xml: [
              [start_tag, PageList.PageRange, PageRanges],
              [start_tag, PageList.ClearRange, ClearRanges],
            ]
        options:
          GetPageBlobPageRangesOptions:
            - BasicRequestOptions: inline
            - PreviousSnapshot: std::string, nullable
            - PreviousSnapshotUrl: std::string, nullable
            - Range: Azure::Core::Http::HttpRange, nullable
            - LeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "pagelist"]
          - [add_query_code, "prevsnapshot", PreviousSnapshot]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-previous-snapshot-url", PreviousSnapshotUrl]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - [get_xml_body_code]
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-content-length", BlobSize]

    - StartCopyIncremental:
        http_method: Put
        http_status_code: 202
        return_type:
          StartBlobCopyIncrementalResultInternal:
            - BasicResponse: inline
            - BlobCopyInfo: inline
        options:
          StartBlobCopyIncrementalOptions:
            - BasicRequestOptions: inline
            - CopySource: std::string
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "incrementalcopy"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-copy-source", CopySource]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-status", CopyStatus]
          - [get_header_code, "x-ms-version-id", VersionId]

  - AppendBlob:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type:
          CreateAppendBlobResult:  # Response type for #Azure::Storage::Blobs::AppendBlobClient::Create.
            - BasicResponse: inline
            - Created: bool = true  # Indicates if the append blob was successfully created in this operation.
            - BlobContentInfo: inline
        options:
          CreateAppendBlobOptions:
            - BasicRequestOptions: inline
            - HttpHeaders: BlobHttpHeaders
            - Metadata: Metadata
            - LeaseId: std::string, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-type", "AppendBlob"]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - AppendBlock:
        http_method: Put
        http_status_code: 201
        return_type:
          AppendBlockResult:  # Response type for #Azure::Storage::Blobs::AppendBlobClient::AppendBlock.
            - BasicResponse: inline
            - BlobAppendInfo: inline
        options:
          AppendBlockOptions:
            - BodiedRequestOptions: inline
            - TransactionalContentHash: ContentHash, nullable
            - LeaseId: std::string, nullable
            - MaxSize: int64_t, nullable
            - AppendPosition: int64_t, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "appendblock"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-condition-maxsize", MaxSize]
          - [add_header_code, "x-ms-blob-condition-appendpos", AppendPosition]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-append-offset", AppendOffset]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - AppendBlockFromUri:
        http_method: Put
        http_status_code: 201
        return_type:
          AppendBlockFromUriResult:  # Response type for #Azure::Storage::Blobs::AppendBlobClient::AppendBlockFromUri.
            - BasicResponse: inline
            - BlobAppendInfo: inline
        options:
          AppendBlockFromUriOptions:
            - BasicRequestOptions: inline
            - SourceUri: std::string
            - SourceRange: Azure::Core::Http::HttpRange, nullable
            - TransactionalContentHash: ContentHash, nullable
            - LeaseId: std::string, nullable
            - MaxSize: int64_t, nullable
            - AppendPosition: int64_t, nullable
            - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
            - BlobRequestEncryptionScopeOptions: inline
            - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "appendblock"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source-range", SourceRange]
          - *REQUEST_SOURCE_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-condition-maxsize", MaxSize]
          - [add_header_code, "x-ms-blob-condition-appendpos", AppendPosition]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-append-offset", AppendOffset]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - Seal:
        http_method: Put
        http_status_code: 200
        return_type:
          SealAppendBlobResult:  # Response type for #Azure::Storage::Blobs::AppendBlobClient::Seal.
            - BasicResponse: inline
            - ETag: Azure::ETag
            - LastModified: Azure::DateTime(RFC1123)
            - IsSealed: bool = true
        options:
          SealAppendBlobOptions:
            - BasicRequestOptions: inline
            - LeaseId: std::string, nullable
            - BlobRequestConditionalHeaders: inline
            - AppendPosition: int64_t, nullable
        request_action:
          - [add_query_code, "comp", "seal"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - [add_header_code, "x-ms-blob-condition-appendpos", AppendPosition]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

  - BlobBatch:
    - SubmitBatch:
        http_method: Post
        http_status_code: 202
        return_type:
          SubmitBlobBatchResultInternal:
            - BasicResponse: inline
            - ContentType: std::string
        options:
          SubmitBlobBatchOptions:
            - BodiedRequestOptions: inline
            - ContentType: std::string
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "batch"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "Content-Type", ContentType]
        response_action:
          - [get_header_code, "Content-Type", ContentType]


Models:
  HashAlgorithm:  # Extensible enum used to identify hash algorithm.
    - external: true
    - type: enum class
    - Md5  # MD5
    - Crc64  # CRC64
  ContentHash:
    - external: true
    - Value: std::vector<uint8_t>
    - Algorithm: HashAlgorithm
  BasicRequestOptions:
    - noexport: true
    - type: struct
    - Timeout: int32_t, nullable
  BodiedRequestOptions:
    - noexport: true
    - type: struct
    - BasicRequestOptions: inline
  BasicResponse:
    - noexport: true
    - type: struct
  BodiedResponse:
    - noexport: true
    - type: struct
    - BasicResponse: inline
    - BodyStream: std::unique_ptr<Azure::Core::IO::BodyStream>  # Content of the blob or blob range.
  PublicAccessType:  # Extensible enum used to indicates whether data in the container may be accessed publicly and the level of access.
    - type: enum class
    - BlobContainer: "container"  # Indicates full public read access for container and blob data. Clients can enumerate blobs within the container via anonymous request, but cannot enumerate containers within the storage account.
    - Blob: "blob"  # Indicates public read access for blobs. Blob data within this container can be read via anonymous request, but container data is not available. Clients cannot enumerate blobs within the container via anonymous request.
    - None: ""  # Indicates the container is private to the account owner.
  BlockType:  # Extensible enum used to specify how the service should look for a block ID.
    - type: enum class
    - Committed  # Look for a block ID in the committed block list.
    - Uncommitted  # Look for a block ID in the uncommitted block list.
    - Latest  # Look for a block ID in the uncommitted block list first and then in the committed block list.
  BlobType:  # Extensible enum used to identify blob type.
    - type: enum class
    - BlockBlob  # Block blob.
    - PageBlob  # Page blob.
    - AppendBlob  # Append blob.
  LeaseState:  # Extensible enum used to identify the state of lease.
    - type: enum class
    - Available: "available"  # The lease is unlocked and can be acquired.
    - Leased: "leased"  # The lease is locked.
    - Expired: "expired"  # The lease duration has expired.
    - Breaking: "breaking"  # The lease has been broken, but the lease will continue to be locked until the break period has expired.
    - Broken: "broken"  # The lease has been broken, and the break period has expired.
  LeaseStatus:  # Extensible enum used to identify the status of lease.
    - type: enum class
    - Locked: "locked"  # The lease is locked.
    - Unlocked: "unlocked"  # The lease is unlocked.
  LeaseDurationType:  # Extensible enum used to identify the lease is of inifinite or fixed duration.
    - type: enum class
    - Infinite: "infinite"  # Infinite duration.
    - Fixed: "fixed"  # Fixed duration.
  AccessTier:  # Extensible enum used to identify access tier of a blob.
    - type: enum class
    - P1  # P1 tier for page blob in a premium storage account.
    - P2  # P2 tier for page blob in a premium storage account.
    - P3  # P3 tier for page blob in a premium storage account.
    - P4  # P4 tier for page blob in a premium storage account.
    - P6  # P6 tier for page blob in a premium storage account.
    - P10  # P10 tier for page blob in a premium storage account.
    - P15  # P15 tier for page blob in a premium storage account.
    - P20  # P20 tier for page blob in a premium storage account.
    - P30  # P30 tier for page blob in a premium storage account.
    - P40  # P40 tier for page blob in a premium storage account.
    - P50  # P50 tier for page blob in a premium storage account.
    - P60  # P60 tier for page blob in a premium storage account.
    - P70  # P70 tier for page blob in a premium storage account.
    - P80  # P80 tier for page blob in a premium storage account.
    - Hot  # Optimized for storing data that is accessed frequently.
    - Cool  # Optimized for storing data that is infrequently accessed and stored for at least 30 days.
    - Archive  # Optimized for storing data that is rarely accessed and stored for at least 180 days with flexible latency requirements, on the order of hours.
  RehydratePriority:  # Extensible enum used to identify rehydrate priority.
    - type: enum class
    - High: "High"  # High priority.
    - Standard: "Standard"  # Standard priority.
  CopyStatus:  # Extensible enum used to identify copy status of a copy operation.
    - type: enum class
    - Success: "success"  # Successful.
    - Pending: "pending"  # Pending.
  SkuName:  # Extensible enum that used to identify the sku of a storage account.
    - type: enum class
    - StandardLrs: "Standard_LRS"  # Standard Locally Redundant Storage
    - StandardGrs: "Standard_GRS"  # Standard Geo Replicated Storage
    - StandardRagrs: "Standard_RAGRS"  # Standard Read-access Geo Replicated Storage
    - StandardZrs: "Standard_ZRS"  # Standard Zone Redundant Storage
    - PremiumLrs: "Premium_LRS"  # Provisioned IO Locally Redundant Storage
    - PremiumZrs: "Premium_ZRS"  # Provisioned IO Zone Redundant Storage
    - StandardGzrs: "Standard_GZRS"  # Standard Geo-zone-redundant Storage
    - StandardRagzrs: "Standard_RAGZRS"  # Standard Read-access Geo-zone-redundant Storage
  AccountKind:  # Extensible enum that used to identify the account kind.
    - type: enum class
    - Storage: "Storage"  # General-purpose v1 account.
    - BlobStorage: "BlobStorage"  # Blob Storage account.
    - StorageV2: "StorageV2"  # General-purpose v2 account.
    - FileStorage: "FileStorage"  # File Storage account.
    - BlockBlobStorage: "BlockBlobStorage"  # Block Blob Storage account.
  EncryptionAlgorithmType:  # Extensible enum used to identify encryption algorithm.
    - type: enum class
    - Aes256: "AES256"  # AES-256
  BlobBlock:  # Describes a single block in block blob.
    - Name: std::string  # Base64 encoded block ID.
    - Size: int64_t = 0  # Block size in bytes.
    - from_xml: [
      [text, Name, Name],
      [text, Size, Size],
    ]
  AnalyticsLogging:  # Azure analytics logging settings.
    - Version: std::string  # The version of storage analytics to configure.
    - Delete: bool = false  # Whether all delete requests should be logged.
    - Read: bool = false  # Whether all read requests should be logged.
    - Write: bool = false  # Whether all write requests should be logged.
    - RetentionPolicy: RetentionPolicy  # Determines how long the data should be persist.
    - from_xml: [
      [text, Version, Version],
      [text, Delete, Delete],
      [text, Read, Read],
      [text, Write, Write],
      [start_tag, RetentionPolicy, RetentionPolicy],
    ]
    - to_xml: [
      [tag, Version, Version],
      [tag, Delete, Delete],
      [tag, Read, Read],
      [tag, Write, Write],
      [tag, RetentionPolicy, RetentionPolicy],
    ]
  Metrics:  # Summary of request statistics grouped by API in hour or minute aggregates for blobs.
    - Version: std::string  # The version of storage analytics to configure.
    - IsEnabled: bool = false  # Indicates whether metrics are enabled for blob service.
    - RetentionPolicy: RetentionPolicy  # Determines how long the metrics data should persist.
    - IncludeApis: bool, nullable  # Indicates whether metrics should generate summary statistics for called API operations.
    - from_xml: [
      [text, Version, Version],
      [text, Enabled, IsEnabled],
      [text, IncludeAPIs, IncludeApis],
      [start_tag, RetentionPolicy, RetentionPolicy],
    ]
    - to_xml: [
      [tag, Version, Version],
      [tag, Enabled, IsEnabled],
      [tag, IncludeAPIs, IncludeApis],
      [tag, RetentionPolicy, RetentionPolicy],
    ]
  CorsRule:  # Settings for a CORS rule.
    - AllowedOrigins: std::string  # A comma-separated list of origin domains that are allowed via CORS, or "*" if all domains are allowed.
    - AllowedMethods: std::string  # A comma-separated list of HTTP methods that are allowed to be executed by the origin. For Azure Storage, permitted methods are DELETE, GET, HEAD, MERGE, POST, OPTIONS or PUT.
    - AllowedHeaders: std::string  # A comma-separated list of headers allowed to be part of the cross-origin request.
    - ExposedHeaders: std::string  # A comma-separated list of response headers to expose to CORS clients.
    - MaxAgeInSeconds: int32_t = 0  # The number of seconds that the client/browser should cache a preflight response.
    - from_xml: [
      [text, AllowedOrigins, AllowedOrigins],
      [text, AllowedMethods, AllowedMethods],
      [text, MaxAgeInSeconds, MaxAgeInSeconds],
      [text, ExposedHeaders, ExposedHeaders],
      [text, AllowedHeaders, AllowedHeaders],
    ]
    - to_xml: [
      [tag, CorsRule.AllowedOrigins, AllowedOrigins],
      [tag, CorsRule.AllowedMethods, AllowedMethods],
      [tag, CorsRule.AllowedHeaders, AllowedHeaders],
      [tag, CorsRule.ExposedHeaders, ExposedHeaders],
      [tag, CorsRule.MaxAgeInSeconds, MaxAgeInSeconds],
    ]
  RetentionPolicy:  # Determines how long the associated data should persist.
    - IsEnabled: bool = false  # Indicates whether this retention policy is enabled.
    - Days: int32_t, nullable  # Indicates the number of days that metrics or logging or soft-deleted data should be retained.
    - from_xml: [
      [text, Enabled, IsEnabled],
      [text, Days, Days],
    ]
    - to_xml: [
      [tag, Enabled, IsEnabled],
      [tag, Days, Days],
    ]
  StaticWebsite:  # The properties that enable a storage account to host a static website.
    - IsEnabled: bool = false  # Indicates whether this storage account is hosting a static website.
    - IndexDocument: std::string, nullable  # The default name of the index page under each directory.
    - DefaultIndexDocumentPath: std::string, nullable  # Absolute path of the default index page.
    - ErrorDocument404Path: std::string, nullable   # The absolute path of the custom 404 page.
    - from_xml: [
      [text, Enabled, IsEnabled],
      [text, IndexDocument, IndexDocument],
      [text, DefaultIndexDocumentPath, DefaultIndexDocumentPath],
      [text, ErrorDocument404Path, ErrorDocument404Path],
    ]
    - to_xml: [
      [tag, Enabled, IsEnabled],
      [tag, IndexDocument, IndexDocument],
      [tag, DefaultIndexDocumentPath, DefaultIndexDocumentPath],
      [tag, ErrorDocument404Path, ErrorDocument404Path],
    ]
  BlobServiceProperties:  # Properties of blob service.
    - Logging: AnalyticsLogging  # Azure analytics logging settings.
    - HourMetrics: Metrics  # Summary of request statistics grouped by API in hour aggregates for blobs.
    - MinuteMetrics: Metrics  # Summary of request statistics grouped by API in minute aggregates for blobs.
    - Cors: std::vector<CorsRule>  # CORS rules set.
    - DefaultServiceVersion: std::string, nullable  # The default API version used to handle blob service requests if API version is not specified in the request header.
    - DeleteRetentionPolicy: RetentionPolicy  # Retention policy that determines how long the associated data should persist.
    - StaticWebsite: StaticWebsite  # The properties that enable an storage account to host a static website.
    - from_xml: [
      [start_tag, StorageServiceProperties.Logging, Logging],
      [start_tag, StorageServiceProperties.HourMetrics, HourMetrics],
      [start_tag, StorageServiceProperties.MinuteMetrics, MinuteMetrics],
      [start_tag, StorageServiceProperties.Cors.CorsRule, Cors],
      [text, StorageServiceProperties.DefaultServiceVersion, DefaultServiceVersion],
      [start_tag, StorageServiceProperties.DeleteRetentionPolicy, DeleteRetentionPolicy],
      [start_tag, StorageServiceProperties.StaticWebsite, StaticWebsite],
    ]
    - to_xml: [
      [tag, Logging, Logging],
      [tag, HourMetrics, HourMetrics],
      [tag, MinuteMetrics, MinuteMetrics],
      [tag, Cors, Cors],
      [tag, DefaultServiceVersion, DefaultServiceVersion],
      [tag, DeleteRetentionPolicy, DeleteRetentionPolicy],
      [tag, StaticWebsite, StaticWebsite],
    ]
  BlobRequestConditionalHeaders:
    - noexport: true
    - IfModifiedSince: Azure::DateTime(RFC1123), nullable
    - IfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
    - IfMatch: Azure::ETag
    - IfNoneMatch: Azure::ETag
    - IfTags: std::string, nullable
  BlobRequestSourceConditionalHeaders:
    - noexport: true
    - SourceIfModifiedSince: Azure::DateTime(RFC1123), nullable
    - SourceIfUnmodifiedSince: Azure::DateTime(RFC1123), nullable
    - SourceIfMatch: Azure::ETag
    - SourceIfNoneMatch: Azure::ETag
  BlockInfo:
    - noexport: true
    - TransactionalContentHash: ContentHash, nullable
    - BlobResponseEncryptionOptions: inline
  BlobHttpHeaders:  # Standard HTTP properties supported by containers and blobs.
    - ContentType: std::string  # MIME content type of the blob.
    - ContentEncoding: std::string  # Specifies which content encodings have been applied to the blob.
    - ContentLanguage: std::string  # Specifies the natural languages used by this blob.
    - ContentHash: ContentHash  # A hash of the blob content.
    - CacheControl: std::string  # Specifies directives for caching mechanisms.
    - ContentDisposition: std::string  # Conveys additional information about how to process the resource payload, and also can be used to attach additional metadata.
  BlobRequestCustomerProvidedKeyEncryptionOptions:
    - noexport: true
    - EncryptionKey: std::string, nullable
    - EncryptionKeySha256: std::vector<uint8_t>, nullable
    - EncryptionAlgorithm: EncryptionAlgorithmType, nullable
  BlobRequestEncryptionScopeOptions:
    - noexport: true
    - EncryptionScope: std::string, nullable
  BlobResponseEncryptionOptions:
    - noexport: true
    - IsServerEncrypted: bool = false
    - EncryptionKeySha256: std::vector<uint8_t>, nullable
    - EncryptionScope: std::string, nullable
  DownloadBlobDetails:  # Detailed information of a downloaded blob.
    - type: struct
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - CreatedOn: Azure::DateTime(RFC1123)
    - ExpiresOn: Azure::DateTime(RFC1123), nullable  # The time this blob will expire.
    - LastAccessedOn: Azure::DateTime(RFC1123), nullable
    - HttpHeaders: BlobHttpHeaders
    - Metadata: Metadata
    - SequenceNumber: int64_t, nullable
    - CommittedBlockCount: int32_t, nullable
    - IsSealed: bool, nullable
    - LeaseDuration: LeaseDurationType, nullable
    - LeaseState: LeaseState, nullable
    - LeaseStatus: LeaseStatus, nullable
    - BlobResponseEncryptionOptions: inline
    - ObjectReplicationDestinationPolicyId: std::string, nullable
    - ObjectReplicationSourceProperties: std::vector<ObjectReplicationPolicy>
    - TagCount: int32_t, nullable
    - CopyId: std::string, nullable
    - CopySource: std::string, nullable
    - CopyStatus: CopyStatus, nullable
    - CopyStatusDescription: std::string, nullable
    - CopyProgress: std::string, nullable
    - CopyCompletedOn: Azure::DateTime(RFC1123), nullable
    - VersionId: std::string, nullable
    - IsCurrentVersion: bool, nullable
  BlobContentInfo:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - VersionId: std::string, nullable
    - BlobResponseEncryptionOptions: inline
  BlobContainerItemWithoutName:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - Metadata: Metadata
    - AccessType: PublicAccessType = PublicAccessType::None
    - HasImmutabilityPolicy: bool = false
    - HasLegalHold: bool = false
    - LeaseDuration: LeaseDurationType, nullable
    - LeaseState: LeaseState = LeaseState::Available
    - LeaseStatus: LeaseStatus = LeaseStatus::Unlocked
    - DefaultEncryptionScope: std::string
    - PreventEncryptionScopeOverride: bool = false
  BlobContainerItemDetails:  # Detailed information of a blob container.
    - type: struct
    - BlobContainerItemWithoutName: inline
    - RemainingRetentionDays: int32_t, nullable  # Remaining days before this container will be permanantely deleted. Only valid when this container was deleted.
    - DeletedOn: Azure::DateTime(RFC1123), nullable  # Data and time at which this container was deleted. Only valid when this container was deleted.
  BlobContainerItem:  # A container item from the result of #Azure::Storage::Blobs::BlobServiceClient::ListBlobContainers.
    - Name: std::string  # Blob container name.
    - IsDeleted: bool = false  # Indicates whether this container was deleted.
    - VersionId: std::string, nullable  # Version ID of a deleted container. This is null if a container is not deleted.
    - Details: BlobContainerItemDetails  # Detailed information of this container item.
    - from_xml: [
      [text, Name, Name],
      [text, Properties.Etag, Details.ETag],
      [text, Properties.Last-Modified, Details.LastModified],
      [text, Properties.PublicAccess, Details.AccessType],
      [text, Properties.HasImmutabilityPolicy, Details.HasImmutabilityPolicy],
      [text, Properties.HasLegalHold, Details.HasLegalHold],
      [text, Properties.LeaseStatus, Details.LeaseStatus],
      [text, Properties.LeaseState, Details.LeaseState],
      [text, Properties.LeaseDuration, Details.LeaseDuration],
      [text, Properties.DefaultEncryptionScope, Details.DefaultEncryptionScope],
      [text, Properties.DenyEncryptionScopeOverride, Details.PreventEncryptionScopeOverride],
      [start_tag, Metadata, Details.Metadata],
      [text, Deleted, IsDeleted],
      [text, Version, VersionId],
      [text, Properties.DeletedTime, Details.DeletedOn],
      [text, Properties.RemainingRetentionDays, Details.RemainingRetentionDays],
    ]
  BlobItemDetails:  # Detailed information of a blob.
    - type: struct
    - HttpHeaders: BlobHttpHeaders
    - Metadata: Metadata
    - CreatedOn: Azure::DateTime(RFC1123)
    - ExpiresOn: Azure::DateTime(RFC1123), nullable  # The time this blob will expire.
    - LastAccessedOn: Azure::DateTime(RFC1123), nullable
    - LastModified: Azure::DateTime(RFC1123)
    - ETag: Azure::ETag
    - AccessTier: AccessTier, nullable
    - IsAccessTierInferred: bool, nullable
    - LeaseStatus: LeaseStatus = LeaseStatus::Unlocked
    - LeaseState: LeaseState = LeaseState::Available
    - LeaseDuration: LeaseDurationType, nullable
    - BlobResponseEncryptionOptions: inline
    - SequenceNumber: int64_t, nullable
    - IsSealed: bool, nullable
    - ObjectReplicationSourceProperties: std::vector<ObjectReplicationPolicy>
  BlobItem:  # A blob item from the result of #Azure::Storage::Blobs::BlobContainerClient::ListBlobs.
    - Name: std::string
    - BlobSize: int64_t = 0
    - BlobType: BlobType
    - IsDeleted: bool = false  # Indicates whether this blob was deleted.
    - Snapshot: std::string  # A string value that uniquely identifies a blob snapshot.
    - VersionId: std::string, nullable
    - IsCurrentVersion: bool, nullable
    - Details: BlobItemDetails  # Detailed information of the downloaded blob.
    - from_xml: [
      [text, Name, Name],
      [text, Deleted, IsDeleted],
      [text, Snapshot, Snapshot],
      [text, VersionId, VersionId],
      [text, IsCurrentVersion, IsCurrentVersion],
      [text, Properties.Content-Type, Details.HttpHeaders.ContentType],
      [text, Properties.Content-Encoding, Details.HttpHeaders.ContentEncoding],
      [text, Properties.Content-Language, Details.HttpHeaders.ContentLanguage],
      [text, Properties.Content-MD5, Details.HttpHeaders.ContentHash.Value],
      [text, Properties.Cache-Control, Details.HttpHeaders.CacheControl],
      [text, Properties.Content-Disposition, Details.HttpHeaders.ContentDisposition],
      [text, Properties.Creation-Time, Details.CreatedOn],
      [text, Properties.Expiry-Time, Details.ExpiresOn],
      [text, Properties.LastAccessTime, Details.LastAccessedOn],
      [text, Properties.Last-Modified, Details.LastModified],
      [text, Properties.Etag, Details.ETag],
      [text, Properties.Content-Length, BlobSize],
      [text, Properties.BlobType, BlobType],
      [text, Properties.AccessTier, Details.AccessTier],
      [text, Properties.AccessTierInferred, Details.IsAccessTierInferred],
      [text, Properties.LeaseStatus, Details.LeaseStatus],
      [text, Properties.LeaseState, Details.LeaseState],
      [text, Properties.LeaseDuration, Details.LeaseDuration],
      [text, Properties.ServerEncrypted, Details.IsServerEncrypted],
      [text, Properties.EncryptionKeySHA256, Details.EncryptionKeySha256],
      [text, Properties.Sealed, Details.IsSealed],
      [text, Properties.x-ms-blob-sequence-number, Details.SequenceNumber],
      [start_tag, Metadata, Details.Metadata],
      [start_tag, OrMetadata, Details.ObjectReplicationSourceProperties],
    ]
  ListBlobsIncludeFlags:  # Bitwise enum used to specify one or more datasets to include in a list blobs response.
    - type: bitwise enum
    - None: ""  # No extra data should be included.
    - Copy: "copy"  # Metadata related to any current or previous copy operations should be included.
    - Deleted: "deleted"  # Soft-deleted blobs should be included.
    - Metadata: "metadata"  # Metadata should be included.
    - Snapshots: "snapshots"  # Snapshots should be included.
    - Versions: "versions"  # Versions of blobs should be included.
    - UncomittedBlobs: "uncommittedblobs"  # Uncommitted blobs should be included.
  BlobContainerInfo:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
  ListBlobContainersIncludeFlags:  # Bitwise enum used to specify one or more datasets to include in list container response.
    - type: bitwise enum
    - None: ""  # No extra data should be included.
    - Metadata: "metadata"  # Metadata should be included.
    - Deleted: "deleted"  # Soft-deleted containers should be included in the response.
  BlockListType:  # Extensible enum used to specify blocks to list.
    - type: enum class
    - Committed: "committed"  # Only list committed blocks.
    - Uncommitted: "uncommitted"  # Only list uncommitted blocks.
    - All: "all"  # List both committed and uncommitted blocks.
  DeleteSnapshotsOption:  # Extensible enum used to specify whether base blob should be deleted in a delete blob operation.
    - type: enum class
    - IncludeSnapshots: "include"  # Delete the base blob and all snapshots.
    - OnlySnapshots: "only"  # Delete only the blob's snapshots and not the blob itself.
  ArchiveStatus:  # Extensible enum used to identify the destination tier when a blob is being rehydrated and is not complete.
    - type: enum class
    - RehydratePendingToHot: "rehydrate-pending-to-hot"  # The blob is being rehydrated to hot tier.
    - RehydratePendingToCool: "rehydrate-pending-to-cool"  # The blob is being rehydrated to cool tier.
  ObjectReplicationStatus:  # Extensible enum used to identify object replication status.
    - type: enum class
    - Complete: "complete"  # Object replication to the destination container completed.
    - Failed: "failed"  # Object replication to the destination container failed.
  ObjectReplicationRule:  # Contains the object replication rule ID and replication status of a blob.
    - RuleId: std::string  # Rule ID.
    - ReplicationStatus: ObjectReplicationStatus  # Replication status.
  ObjectReplicationPolicy:  # Contains object replication policy ID and the respective list of #ObjectReplicationRule s. This is used when retrieving the object replication properties on the source blob. The policy id for the destination blob is set in ObjectReplicationDestinationPolicyId of the respective method responses.
    - PolicyId: std::string  # The policy ID.
    - Rules: std::vector<ObjectReplicationRule>  # The Rule IDs and respective replication status that are under the policy ID.
  BlobProperties:  # Properties of a blob.
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - CreatedOn: Azure::DateTime(RFC1123)
    - ExpiresOn: Azure::DateTime(RFC1123), nullable  # The time this blob will expire.
    - LastAccessedOn: Azure::DateTime(RFC1123), nullable
    - Metadata: Metadata
    - BlobType: BlobType
    - LeaseDuration: LeaseDurationType, nullable
    - LeaseState: LeaseState, nullable
    - LeaseStatus: LeaseStatus, nullable
    - BlobSize: int64_t = 0
    - HttpHeaders: BlobHttpHeaders
    - SequenceNumber: int64_t, nullable
    - CommittedBlockCount: int32_t, nullable
    - IsSealed: bool, nullable
    - BlobResponseEncryptionOptions: inline
    - AccessTier: AccessTier, nullable
    - IsAccessTierInferred: bool, nullable
    - ArchiveStatus: ArchiveStatus, nullable
    - RehydratePriority: RehydratePriority, nullable
    - AccessTierChangedOn: Azure::DateTime(RFC1123), nullable
    - CopyId: std::string, nullable
    - CopySource: std::string, nullable
    - CopyStatus: CopyStatus, nullable
    - CopyStatusDescription: std::string, nullable
    - IsIncrementalCopy: bool, nullable
    - IncrementalCopyDestinationSnapshot: std::string, nullable
    - CopyProgress: std::string, nullable
    - CopyCompletedOn: Azure::DateTime(RFC1123), nullable
    - ObjectReplicationDestinationPolicyId: std::string, nullable
    - ObjectReplicationSourceProperties: std::vector<ObjectReplicationPolicy>
    - TagCount: int32_t, nullable
    - VersionId: std::string, nullable
    - IsCurrentVersion: bool, nullable
  BlobInfo:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - SequenceNumber: int64_t, nullable
  BlobCopyInfo:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - CopyId: std::string
    - CopyStatus: CopyStatus
    - VersionId: std::string, nullable
  PageInfo:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - TransactionalContentHash: ContentHash, nullable
    - SequenceNumber: int64_t = 0
    - BlobResponseEncryptionOptions: inline
  BlobAppendInfo:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - TransactionalContentHash: ContentHash, nullable
    - AppendOffset: int64_t = 0
    - CommittedBlockCount: int32_t = 0
    - BlobResponseEncryptionOptions: inline
  GeoReplicationStatus:  # Extensible enum used to identify the status of secondary storage endpoint.
    - type: enum class
    - Live: "live"  # The secondary location is active and operational.
    - Bootstrap: "bootstrap"  # Initial synchronization from the primary location to the secondary location is in progress.
    - Unavailable: "unavailable"  # The secondary location is temporarily unavailable.
  GeoReplication:  # Geo-replication information for the secondary storage endpoint.
    - Status: GeoReplicationStatus  # Status of the secondary storage endpoint.
    - LastSyncedOn: Azure::DateTime(RFC1123), nullable  # All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. This value may be null if replication status is bootstrap or unavailable.
    - from_xml: [
      [text, Status, Status],
      [text, LastSyncTime, LastSyncedOn],
    ]
  SignedIdentifier:  # Describes how you reference an ACL in a blob container.
    - Id: std::string  # A unique ID for this signed identifier.
    - StartsOn: Azure::DateTime(ISO8601)  # Date and time since when this policy is active.
    - ExpiresOn: Azure::DateTime(ISO8601)  # Date and time the policy expires.
    - Permissions: std::string  # The permissions for this ACL policy.
    - from_xml: [
      [text, Id, Id],
      [text, AccessPolicy.Start, StartsOn],
      [text, AccessPolicy.Expiry, ExpiresOn],
      [text, AccessPolicy.Permission, Permissions],
    ]
    - to_xml: [
      [tag, SignedIdentifier.Id, Id],
      [tag, SignedIdentifier.AccessPolicy.Start, StartsOn],
      [tag, SignedIdentifier.AccessPolicy.Expiry, ExpiresOn],
      [tag, SignedIdentifier.AccessPolicy.Permission, Permissions],
    ]
  BlobContainerAccessPolicy:  # Access policy for a blob container.
    - AccessType: PublicAccessType = PublicAccessType::None
    - SignedIdentifiers: std::vector<SignedIdentifier>
    - from_xml: [
      [start_tag, SignedIdentifiers.SignedIdentifier, SignedIdentifiers],
    ]
  BlobLease:
    - noexport: true
    - ETag: Azure::ETag
    - LastModified: Azure::DateTime(RFC1123)
    - LeaseId: std::string
  TaggedBlobItem:  # Blob information from the result of #Azure::Storage::Blobs::BlobServiceClient::FindBlobsByTags.
    - BlobName: std::string  # Blob name.
    - BlobContainerName: std::string  # Blob container name.
    - from_xml: [
      [text, Name, BlobName],
      [text, ContainerName, BlobContainerName],
    ]
  ScheduleBlobExpiryOriginType: # Extensible enum used to specify when a file's expiration time should be relative to.
    - type: enum class
    - NeverExpire: "NeverExpire"  # Never expires.
    - RelativeToCreation: "RelativeToCreation"  # Relative to file's creation time.
    - RelativeToNow: "RelativeToNow"  # Relative to current time.
    - Absolute: "Absolute"  # Absolute time.
