service_name: Blobs
output: generated/blob_rest_client.hpp

Constants:
  c_ApiVersion: "2019-12-12"

request_version_timeout_package: &REQUEST_VERSION_TIMEOUT_PACKAGE
  - [add_header_code, "x-ms-version", c_ApiVersion]
  - [add_query_code, "timeout", Timeout]

request_encryption_package: &REQUEST_ENCRYPTION_HEADER_PACKAGE
  - [add_header_code, "x-ms-encryption-key", EncryptionKey]
  - [add_header_code, "x-ms-encryption-key-sha256", EncryptionKeySha256]
  - [add_header_code, "x-ms-encryption-algorithm", EncryptionAlgorithm]
  - [add_header_code, "x-ms-encryption-scope", EncryptionScope, ignorable]

response_encryption_package: &RESPONSE_ENCRYPTION_HEADER_PACKAGE
  - [get_header_code, "x-ms-server-encrypted", ServerEncrypted]
  - [get_header_code, "x-ms-encryption-key-sha256", EncryptionKeySha256]
  - [get_header_code, "x-ms-encryption-scope", EncryptionScope]

response_request_encryption_package: &RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE
  - [get_header_code, "x-ms-request-server-encrypted", ServerEncrypted]
  - [get_header_code, "x-ms-encryption-key-sha256", EncryptionKeySha256]
  - [get_header_code, "x-ms-encryption-scope", EncryptionScope]

response_etag_last_modified_package: &RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
  - [get_header_code, "ETag", ETag]
  - [get_header_code, "Last-Modified", LastModified]

request_checksum_package: &REQUEST_CHECKSUM_HEADER_PACKAGE
  - [add_header_code, "Content-MD5", TransactionalContentMd5]
  - [add_header_code, "x-ms-content-crc64", TransactionalContentCrc64]

response_checksum_package: &RESPONSE_CHECKSUM_HEADER_PACKAGE
  - [get_header_code, "Content-MD5", TransactionalContentMd5]
  - [get_header_code, "x-ms-content-crc64", TransactionalContentCrc64]

request_mime_package: &REQUEST_MIME_HEADER_PACKAGE
  - [add_header_code, "x-ms-blob-content-type", HttpHeaders.ContentType, optional]
  - [add_header_code, "x-ms-blob-content-encoding", HttpHeaders.ContentEncoding, optional]
  - [add_header_code, "x-ms-blob-content-language", HttpHeaders.ContentLanguage, optional]
  - [add_header_code, "x-ms-blob-cache-control", HttpHeaders.CacheControl, optional]
  - [add_header_code, "x-ms-blob-content-md5", HttpHeaders.ContentMd5, optional]
  - [add_header_code, "x-ms-blob-content-disposition", HttpHeaders.ContentDisposition, optional]

response_mime_package: &RESPONSE_MIME_HEADER_PACKAGE
  - [get_header_code, "Content-Type", HttpHeaders.ContentType, optional]
  - [get_header_code, "Content-Encoding", HttpHeaders.ContentEncoding, optional]
  - [get_header_code, "Content-Language", HttpHeaders.ContentLanguage, optional]
  - [get_header_code, "Cache-Control", HttpHeaders.CacheControl, optional]
  - [get_header_code, "Content-MD5", HttpHeaders.ContentMd5, optional]
  - [get_header_code, "Content-Disposition", HttpHeaders.ContentDisposition, optional]

response_lease_package: &RESPONSE_LEASE_HEADER_PACKAGE
  - [get_header_code, "x-ms-lease-status", LeaseStatus]
  - [get_header_code, "x-ms-lease-state", LeaseState]
  - [get_header_code, "x-ms-lease-duration", LeaseDuration]

request_conditional_headers_package: &REQUEST_CONDITIONAL_HEADER_PACKAGE
  - [add_header_code, "If-Modified-Since", IfModifiedSince]
  - [add_header_code, "If-Unmodified-Since", IfUnmodifiedSince, ignorable]
  - [add_header_code, "If-Match", IfMatch, ignorable]
  - [add_header_code, "If-None-Match", IfNoneMatch, ignorable]

request_source_conditional_headers_package: &REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
  - [add_header_code, "x-ms-source-if-modified-since", SourceIfModifiedSince]
  - [add_header_code, "x-ms-source-if-unmodified-since", SourceIfUnmodifiedSince]
  - [add_header_code, "x-ms-source-if-match", SourceIfMatch]
  - [add_header_code, "x-ms-source-if-none-match", SourceIfNoneMatch]

Services:
  - Service:
    - ListBlobContainers:
        http_method: Get
        http_status_code: 200
        return_type:
          ListContainersSegmentResult:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - Prefix: std::string
            - Marker: std::string
            - NextMarker: std::string
            - Items: std::vector<BlobContainerItem>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.Marker, Marker],
              [text, EnumerationResults.NextMarker, NextMarker],
              [start_tag, EnumerationResults.Containers.Container, Items],
            ]
        options:
          - BasicRequestOptions: inline
          - Prefix: std::string, nullable
          - Marker: std::string, nullable
          - MaxResults: int32_t, nullable
          - Include: ListBlobContainersIncludeItem = ListBlobContainersIncludeItem::None
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix]
          - [add_query_code, "marker", Marker]
          - [add_query_code, "maxresults", MaxResults]
          - [add_query_code, "include", Include, optional]
        response_action:
          - [get_xml_body_code]

    - GetUserDelegationKey:
        http_method: Post
        http_status_code: 200
        return_type:
          GetUserDelegationKeyResult:
            - UserDelegationKey: inline
        options:
          - BasicRequestOptions: inline
          - StartsOn: std::string
          - ExpiresOn: std::string
          - to_xml: [
            [tag, KeyInfo.Start, StartsOn],
            [tag, KeyInfo.Expiry, ExpiresOn],
          ]
        request_action:
          - [add_xml_body_code]
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "userdelegationkey"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_xml_body_code]

    - GetProperties:
        http_method: Get
        http_status_code: 200
        return_type:
          GetServicePropertiesResult:
            - BlobServiceProperties: inline
        options:
          - BasicRequestOptions: inline
        request_action:
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_xml_body_code]

    - SetProperties:
        http_method: Put
        http_status_code: 202
        return_type:
          SetServicePropertiesResult:
            - BasicResponse: inline
        options:
          - BasicRequestOptions: inline
          - Properties: BlobServiceProperties
          - to_xml: [
            [tag, StorageServiceProperties, Properties],
          ]
        request_action:
          - [add_xml_body_code]
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action: {}

    - GetAccountInfo:
        http_method: Head
        http_status_code: 200
        return_type:
          GetAccountInfoResult:
            - SkuName: SkuName = SkuName::Unknown
            - AccountKind: AccountKind = AccountKind::Unknown
        options:
            - BasicRequestOptions: inline
        request_action:
          - [add_query_code, "restype", "account"]
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_header_code, "x-ms-sku-name", SkuName]
          - [get_header_code, "x-ms-account-kind", AccountKind]

    - GetStatistics:
        http_method: Get
        http_status_code: 200
        return_type:
          GetServiceStatisticsResult:
            - GeoReplication: BlobGeoReplication
            - from_xml: [
              [start_tag, StorageServiceStats.GeoReplication, GeoReplication]
            ]
        options:
          - BasicRequestOptions: inline
        request_action:
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "stats"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
        response_action:
          - [get_xml_body_code]


  - Container:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type:
          CreateContainerResult:
            - BlobContainerInfo: inline
        options:
          - BasicRequestOptions: inline
          - AccessType: PublicAccessType, nullable
          - Metadata: std::map<std::string, std::string>
          - DefaultEncryptionScope: std::string, nullable
          - PreventEncryptionScopeOverride: bool, nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-blob-public-access", AccessType]
          - [add_header_code, "x-ms-default-encryption-scope", DefaultEncryptionScope]
          - [add_header_code, "x-ms-deny-encryption-scope-override", PreventEncryptionScopeOverride]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - Delete:
        http_method: Delete
        http_status_code: 202
        return_type:
          DeleteContainerResult:
            - BasicResponse: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string, nullable
          - IfModifiedSince: std::string, nullable
          - IfUnmodifiedSince: std::string, nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action: {}

    - Undelete:
        http_method: Put
        http_status_code: 201
        return_type:
          UndeleteContainerResult:
            - BasicResponse: inline
        options:
          - BasicRequestOptions: inline
          - DeletedContainerName: std::string
          - DeletedContainerVersion: std::string
        request_action:
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "undelete"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-deleted-container-name", DeletedContainerName]
          - [add_header_code, "x-ms-deleted-container-version", DeletedContainerVersion]
        response_action: {}

    - GetProperties:
        http_method: Head
        http_status_code: 200
        return_type:
          GetContainerPropertiesResult:
            - BasicResponse: inline
            - BlobContainerItemWithoutName: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string, nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - [get_header_code, "x-ms-blob-public-access", AccessType, optional]
          - [get_header_code, "x-ms-has-immutability-policy", HasImmutabilityPolicy]
          - [get_header_code, "x-ms-has-legal-hold", HasLegalHold]
          - *RESPONSE_LEASE_HEADER_PACKAGE
          - [get_header_code, "x-ms-default-encryption-scope", DefaultEncryptionScope]
          - [get_header_code, "x-ms-deny-encryption-scope-override", PreventEncryptionScopeOverride]

    - SetMetadata:
        http_method: Put
        http_status_code: 200
        return_type:
          SetContainerMetadataResult:
            - BlobContainerInfo: inline
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string, nullable
          - IfModifiedSince: std::string, nullable
        request_action:
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "metadata"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - ListBlobsFlat:
        http_method: Get
        http_status_code: 200
        return_type:
          ListBlobsFlatSegmentResult:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - Container: std::string
            - Prefix: std::string
            - Marker: std::string
            - NextMarker: std::string
            - Items: std::vector<BlobItem>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [attribute, EnumerationResults, ContainerName, Container],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.Marker, Marker],
              [text, EnumerationResults.NextMarker, NextMarker],
              [start_tag, EnumerationResults.Blobs.Blob, Items],
            ]
        options:
          - BasicRequestOptions: inline
          - Prefix: std::string, nullable
          - Marker: std::string, nullable
          - MaxResults: int32_t, nullable
          - Include: ListBlobsIncludeItem = ListBlobsIncludeItem::None
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix]
          - [add_query_code, "marker", Marker]
          - [add_query_code, "maxresults", MaxResults]
          - [add_query_code, "include", Include, optional]
        response_action:
          - [get_xml_body_code]

    - ListBlobsByHierarchy:
        http_method: Get
        http_status_code: 200
        return_type:
          ListBlobsByHierarchySegmentResult:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - Container: std::string
            - Prefix: std::string
            - Delimiter: std::string
            - Marker: std::string
            - NextMarker: std::string
            - Items: std::vector<BlobItem>
            - BlobPrefixes: std::vector<BlobPrefix>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [attribute, EnumerationResults, ContainerName, Container],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.Delimiter, Delimiter],
              [text, EnumerationResults.Marker, Marker],
              [text, EnumerationResults.NextMarker, NextMarker],
              [start_tag, EnumerationResults.Blobs.Blob, Items],
              [start_tag, EnumerationResults.Blobs.BlobPrefix, BlobPrefixes]
            ]
        options:
          - BasicRequestOptions: inline
          - Prefix: std::string, nullable
          - Delimiter: std::string, nullable
          - Marker: std::string, nullable
          - MaxResults: int32_t, nullable
          - Include: ListBlobsIncludeItem = ListBlobsIncludeItem::None
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix]
          - [add_query_code, "delimiter", Delimiter]
          - [add_query_code, "marker", Marker]
          - [add_query_code, "maxresults", MaxResults]
          - [add_query_code, "include", Include, optional]
        response_action:
          - [get_xml_body_code]

    - GetAccessPolicy:
        http_method: Get
        http_status_code: 200
        return_type:
          GetContainerAccessPolicyResult:
            - BlobContainerAccessPolicy: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "acl"]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-public-access", AccessType]
          - [get_xml_body_code]

    - SetAccessPolicy:
        http_method: Put
        http_status_code: 200
        return_type:
          SetContainerAccessPolicyResult:
            - BlobContainerInfo: inline
        options:
          - BasicRequestOptions: inline
          - AccessType: PublicAccessType, nullable
          - LeaseId: std::string, nullable
          - IfModifiedSince: std::string, nullable
          - IfUnmodifiedSince: std::string, nullable
          - SignedIdentifiers: std::vector<BlobSignedIdentifier>
          - to_xml: [
              [tag, SignedIdentifiers, SignedIdentifiers],
            ]
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "acl"]
          - [add_header_code, "x-ms-blob-public-access", AccessType]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - [add_xml_body_code]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - AcquireLease:
        http_method: Put
        http_status_code: 201
        return_type:
          AcquireContainerLeaseResult:
            - BlobLease: inline
        options:
          - BasicRequestOptions: inline
          - LeaseDuration: int32_t = -1
          - ProposedLeaseId: std::string, nullable
          - IfModifiedSince: std::string, nullable
          - IfUnmodifiedSince: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "acquire"]
          - [add_header_code, "x-ms-lease-duration", LeaseDuration]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - RenewLease:
        http_method: Put
        http_status_code: 200
        return_type:
          RenewContainerLeaseResult:
            - BlobLease: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string
          - IfModifiedSince: std::string, nullable
          - IfUnmodifiedSince: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "renew"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ChangeLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ChangeContainerLeaseResult:
            - BlobLease: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string
          - ProposedLeaseId: std::string
          - IfModifiedSince: std::string, nullable
          - IfUnmodifiedSince: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "change"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ReleaseLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ReleaseContainerLeaseResult:
            - BlobContainerInfo: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string
          - IfModifiedSince: std::string, nullable
          - IfUnmodifiedSince: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "release"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - BreakLease:
        http_method: Put
        http_status_code: 202
        return_type:
          BreakContainerLeaseResult:
            - ETag: std::string
            - LastModified: std::string
            - LeaseTime: int32_t = 0
        options:
          - BasicRequestOptions: inline
          - BreakPeriod: int32_t, nullable
          - IfModifiedSince: std::string, nullable
          - IfUnmodifiedSince: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "break"]
          - [add_header_code, "x-ms-lease-break-period", BreakPeriod]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-time", LeaseTime]


  - Blob:
    - Download:
        http_method: Get
        http_status_code: [200, 206]
        return_type:
          DownloadBlobResult:
            - BlobDownloadResponse: inline
        options:
          - BasicRequestOptions: inline
          - Range: std::pair<int64_t, int64_t>, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - LeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_MIME_HEADER_PACKAGE
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE
          - *RESPONSE_LEASE_HEADER_PACKAGE
          - [get_header_code, "Content-Range", ContentRange]
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - [get_header_code, "x-ms-blob-sealed", IsSealed]
          - [get_header_code, "x-ms-blob-type", BlobType]
          - [get_header_code, "x-ms-or-policy-id", ObjectReplicationDestinationPolicyId]
          - [get_or_code, "x-ms-or-", ObjectReplicationSourceProperties]
          - [get_body_code, BodyStream]

    - Delete:
        separate_functions: true
        http_method: Delete
        http_status_code: 202
        return_type:
          DeleteBlobResult:
            - BasicResponse: inline
        options:
          - BasicRequestOptions: inline
          - DeleteSnapshots: DeleteSnapshotsOption, nullable
          - LeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-delete-snapshots", DeleteSnapshots]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action: {}

    - Undelete:
        http_method: Put
        http_status_code: 200
        return_type:
          UndeleteBlobResult:
            - BasicResponse: inline
        options:
          - BasicRequestOptions: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "undelete"]
        response_action: {}

    - GetProperties:
        http_method: Head
        http_status_code: 200
        return_type:
          GetBlobPropertiesResult:
            - BlobProperties: inline
        options:
          - BasicRequestOptions: inline
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - LeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-creation-time", CreationTime]
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - [get_header_code, "x-ms-blob-type", BlobType]
          - *RESPONSE_LEASE_HEADER_PACKAGE
          - [get_header_code, "Content-Length", ContentLength]
          - *RESPONSE_MIME_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - [get_header_code, "x-ms-blob-sealed", IsSealed]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE
          - [get_header_code, "x-ms-access-tier", Tier]
          - [get_header_code, "x-ms-access-tier-inferred", AccessTierInferred]
          - [get_header_code, "x-ms-archive-status", ArchiveStatus]
          - [get_header_code, "x-ms-access-tier-change-time", AccessTierChangeTime]
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-source", CopySource]
          - [get_header_code, "x-ms-copy-status", CopyStatus]
          - [get_header_code, "x-ms-copy-progress", CopyProgress]
          - [get_header_code, "x-ms-copy-completion-time", CopyCompletionTime]
          - [get_header_code, "x-ms-or-policy-id", ObjectReplicationDestinationPolicyId]
          - [get_or_code, "x-ms-or-", ObjectReplicationSourceProperties]

    - SetHttpHeaders:
        http_method: Put
        http_status_code: 200
        return_type:
          SetBlobHttpHeadersResult:
            - BlobInfo: inline
        options:
          - BasicRequestOptions: inline
          - HttpHeaders: BlobHttpHeaders
          - LeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]

    - SetMetadata:
        http_method: Put
        http_status_code: 200
        return_type:
          SetBlobMetadataResult:
            - BlobInfo: inline
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - LeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "metadata"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - SetAccessTier:
        separate_functions: true
        http_method: Put
        http_status_code: [200, 202]
        return_type:
          SetBlobAccessTierResult:
            - BasicResponse: inline
        options:
          - BasicRequestOptions: inline
          - Tier: AccessTier = AccessTier::Unknown
          - RehydratePriority: RehydratePriority, nullable
        request_action:
          - [add_query_code, "comp", "tier"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-access-tier", Tier]
          - [add_header_code, "x-ms-rehydrate-priority", RehydratePriority]
        response_action: {}

    - StartCopyFromUri:
        http_method: Put
        http_status_code: 202
        return_type:
          StartCopyBlobFromUriResult:
            - BlobCopyInfo: inline
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - SourceUri: std::string
          - LeaseId: std::string, nullable
          - SourceLeaseId: std::string, nullable
          - Tier: AccessTier, nullable
          - RehydratePriority: RehydratePriority, nullable
          - BlobRequestConditionalHeaders: inline
          - BlobRequestSourceConditionalHeaders: inline
          - ShouldSealDestination: bool, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-source-lease-id", SourceLeaseId]
          - [add_header_code, "x-ms-access-tier", Tier]
          - [add_header_code, "x-ms-rehydrate-priority", RehydratePriority]
          - [add_header_code, "x-ms-seal-blob", ShouldSealDestination]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - *REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-status", CopyStatus]
          - [get_header_code, "x-ms-version-id", VersionId]

    - AbortCopyFromUri:
        http_method: Put
        http_status_code: 204
        return_type:
          AbortCopyBlobFromUriResult:
            - BasicResponse: inline
        options:
          - BasicRequestOptions: inline
          - CopyId: std::string
          - LeaseId: std::string, nullable
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "copy"]
          - [add_query_code, "copyid", CopyId]
          - [add_header_code, "x-ms-copy-action", "abort"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
        response_action: {}

    - CreateSnapshot:
        http_method: Put
        http_status_code: 201
        return_type:
          CreateBlobSnapshotResult:
            - BasicResponse: inline
            - Snapshot: std::string
            - ETag: std::string
            - LastModified: std::string
            - VersionId: std::string, nullable
            - BlobResponseEncryptionOptions: inline
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "snapshot"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [get_header_code, "x-ms-snapshot", Snapshot]
          - [get_header_code, "x-ms-version-id", VersionId]

    - AcquireLease:
        http_method: Put
        http_status_code: 201
        return_type:
          AcquireBlobLeaseResult:
            - BlobLease: inline
        options:
          - BasicRequestOptions: inline
          - LeaseDuration: int32_t = -1
          - ProposedLeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "acquire"]
          - [add_header_code, "x-ms-lease-duration", LeaseDuration]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - RenewLease:
        http_method: Put
        http_status_code: 200
        return_type:
          RenewBlobLeaseResult:
            - BlobLease: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "renew"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ChangeLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ChangeBlobLeaseResult:
            - BlobLease: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string
          - ProposedLeaseId: std::string
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "change"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-proposed-lease-id", ProposedLeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-id", LeaseId]

    - ReleaseLease:
        http_method: Put
        http_status_code: 200
        return_type:
          ReleaseBlobLeaseResult:
            - BlobInfo: inline
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "release"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]

    - BreakLease:
        http_method: Put
        http_status_code: 202
        return_type:
          BreakBlobLeaseResult:
            - BasicResponse: inline
            - ETag: std::string
            - LastModified: std::string
            - LeaseTime: int32_t = 0
        options:
          - BasicRequestOptions: inline
          - BreakPeriod: int32_t, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_query_code, "comp", "lease"]
          - [add_header_code, "x-ms-lease-action", "break"]
          - [add_header_code, "x-ms-lease-break-period", BreakPeriod]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-lease-time", LeaseTime]


  - BlockBlob:
    - Upload:
        http_method: Put
        http_status_code: 201
        return_type:
          UploadBlockBlobResult:
            - BlobContentInfo: inline
            - TransactionalContentMd5: std::string, nullable
            - TransactionalContentCrc64: std::string, nullable
        options:
          - BodiedRequestOptions: inline
          - TransactionalContentMd5: std::string, nullable
          - TransactionalContentCrc64: std::string, nullable
          - HttpHeaders: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string, nullable
          - Tier: AccessTier, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_body_code]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-type", "BlockBlob"]
          - [add_header_code, "x-ms-access-tier", Tier]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - StageBlock:
        http_method: Put
        http_status_code: 201
        return_type:
          StageBlockResult:
            - BlockInfo: inline
        options:
          - BodiedRequestOptions: inline
          - BlockId: std::string
          - TransactionalContentMd5: std::string, nullable
          - TransactionalContentCrc64: std::string, nullable
          - LeaseId: std::string, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "block"]
          - [add_query_code, "blockid", BlockId]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
        response_action:
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - StageBlockFromUri:
        http_method: Put
        http_status_code: 201
        return_type:
          StageBlockFromUriResult:
            - BlockInfo: inline
        options:
          - BasicRequestOptions: inline
          - BlockId: std::string
          - SourceUri: std::string
          - SourceRange: std::pair<int64_t, int64_t>, nullable
          - TransactionalContentMd5: std::string, nullable
          - TransactionalContentCrc64: std::string, nullable
          - LeaseId: std::string, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestSourceConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "block"]
          - [add_query_code, "blockid", BlockId]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source_range", SourceRange]
          - [add_header_code, "x-ms-source-content-md5", TransactionalContentMd5]
          - [add_header_code, "x-ms-source-content-crc64", TransactionalContentCrc64]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - CommitBlockList:
        http_method: Put
        http_status_code: 201
        return_type:
          CommitBlockListResult:
            - BlobContentInfo: inline
            - TransactionalContentMd5: std::string, nullable
            - TransactionalContentCrc64: std::string, nullable
        options:
          - BasicRequestOptions: inline
          - BlockList: std::vector<std::pair<BlockType, std::string>>
          - HttpHeaders: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
          - Tier: AccessTier, nullable
          - to_xml: [
            [tag, BlockList, BlockList]
          ]
        request_action:
          - [add_xml_body_code]
          - [add_query_code, "comp", "blocklist"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_header_code, "x-ms-access-tier", Tier]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - GetBlockList:
        http_method: Get
        http_status_code: 200
        options:
            - BasicRequestOptions: inline
            - ListType: BlockListTypeOption, nullable
            - LeaseId: std::string, nullable
        return_type:
          GetBlockListResult:
            - BasicResponse: inline
            - ETag: std::string
            - LastModified: std::string
            - ContentType: std::string
            - ContentLength: int64_t = 0
            - CommittedBlocks: std::vector<BlobBlock>
            - UncommittedBlocks: std::vector<BlobBlock>
            - from_xml: [
              [start_tag, BlockList.CommittedBlocks.Block, CommittedBlocks],
              [start_tag, BlockList.UncommittedBlocks.Block, UncommittedBlocks],
            ]
        request_action:
            - [add_query_code, "comp", "blocklist"]
            - [add_query_code, "blocklisttype", ListType]
            - *REQUEST_VERSION_TIMEOUT_PACKAGE
            - [add_header_code, "x-ms-lease-id", LeaseId]
        response_action:
            - [get_xml_body_code]
            - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
            - [get_header_code, "Content-Type", ContentType]
            - [get_header_code, "x-ms-blob-content-length", ContentLength]

  - PageBlob:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type:
          CreatePageBlobResult:
            - BlobContentInfo: inline
            - SequenceNumber: int64_t, nullable
        options:
          - BasicRequestOptions: inline
          - BlobContentLength: int64_t = -1
          - SequenceNumber: int64_t, nullable
          - HttpHeaders: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string, nullable
          - Tier: AccessTier, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-type", "PageBlob"]
          - [add_header_code, "x-ms-blob-content-length", BlobContentLength]
          - [add_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - [add_header_code, "x-ms-access-tier", Tier]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - UploadPages:
        http_method: Put
        http_status_code: 201
        options:
          - BodiedRequestOptions: inline
          - Range: std::pair<int64_t, int64_t>
          - TransactionalContentMd5: std::string, nullable
          - TransactionalContentCrc64: std::string, nullable
          - LeaseId: std::string, nullable
          - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
          - IfSequenceNumberLessThan: int64_t, nullable
          - IfSequenceNumberEqualTo: int64_t, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        return_type:
          UploadPageBlobPagesResult:
            - PageInfo: inline
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-page-write", "update"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - UploadPagesFromUri:
        http_method: Put
        http_status_code: 201
        options:
          - BasicRequestOptions: inline
          - SourceUri: std::string
          - SourceRange: std::pair<int64_t, int64_t>
          - Range: std::pair<int64_t, int64_t>
          - TransactionalContentMd5: std::string, nullable
          - TransactionalContentCrc64: std::string, nullable
          - LeaseId: std::string, nullable
          - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
          - IfSequenceNumberLessThan: int64_t, nullable
          - IfSequenceNumberEqualTo: int64_t, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        return_type:
          UploadPageBlobPagesFromUriResult:
            - PageInfo: inline
        request_action:
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source-range", SourceRange]
          - [add_header_code, "x-ms-source-content-md5", TransactionalContentMd5]
          - [add_header_code, "x-ms-source-content-crc64", TransactionalContentCrc64]
          - [add_header_code, "x-ms-page-write", "update"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - ClearPages:
        http_method: Put
        http_status_code: 201
        options:
          - BasicRequestOptions: inline
          - Range: std::pair<int64_t, int64_t>
          - LeaseId: std::string, nullable
          - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
          - IfSequenceNumberLessThan: int64_t, nullable
          - IfSequenceNumberEqualTo: int64_t, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        return_type:
          ClearPageBlobPagesResult:
            - BasicResponse: inline
            - ETag: std::string
            - LastModified: std::string
            - SequenceNumber: int64_t = 0
            - BlobResponseEncryptionOptions: inline
        request_action:
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-page-write", "clear"]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - Resize:
        http_method: Put
        http_status_code: 200
        return_type:
          ResizePageBlobResult:
            - BasicResponse: inline
            - ETag: std::string
            - LastModified: std::string
            - SequenceNumber: int64_t = 0
        options:
          - BasicRequestOptions: inline
          - BlobContentLength: int64_t = -1
          - LeaseId: std::string, nullable
          - IfSequenceNumberLessThanOrEqualTo: int64_t, nullable
          - IfSequenceNumberLessThan: int64_t, nullable
          - IfSequenceNumberEqualTo: int64_t, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-blob-content-length", BlobContentLength]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-if-sequence-number-le", IfSequenceNumberLessThanOrEqualTo]
          - [add_header_code, "x-ms-if-sequence-number-lt", IfSequenceNumberLessThan]
          - [add_header_code, "x-ms-if-sequence-number-eq", IfSequenceNumberEqualTo]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber]

    - GetPageRanges:
        http_method: Get
        http_status_code: 200
        return_type:
          GetPageBlobPageRangesResultInternal:
            - BasicResponse: inline
            - ETag: std::string
            - LastModified: std::string
            - BlobContentLength: int64_t = 0
            - PageRanges: std::vector<std::pair<int64_t, int64_t>>
            - ClearRanges: std::vector<std::pair<int64_t, int64_t>>
            - from_xml: [
              [start_tag, PageList.PageRange, PageRanges],
              [start_tag, PageList.ClearRange, ClearRanges],
            ]
        options:
          - BasicRequestOptions: inline
          - PreviousSnapshot: std::string, nullable
          - PreviousSnapshotUrl: std::string, nullable
          - Range: std::pair<int64_t, int64_t>, nullable
          - LeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "pagelist"]
          - [add_query_code, "prevsnapshot", PreviousSnapshot]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-previous-snapshot-url", PreviousSnapshotUrl]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - [get_xml_body_code]
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-content-length", BlobContentLength]

    - StartCopyIncremental:
        http_method: Put
        http_status_code: 202
        return_type:
          StartCopyPageBlobIncrementalResult:
            - BlobCopyInfo: inline
        options:
          - BasicRequestOptions: inline
          - CopySource: std::string
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "incrementalcopy"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-copy-source", CopySource]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-status", CopyStatus]
          - [get_header_code, "x-ms-version-id", VersionId]

  - AppendBlob:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type:
          CreateAppendBlobResult:
            - BlobContentInfo: inline
        options:
          - BasicRequestOptions: inline
          - HttpHeaders: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-type", "AppendBlob"]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-version-id", VersionId]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - AppendBlock:
        http_method: Put
        http_status_code: 201
        return_type:
          AppendBlockResult:
            - BlobAppendInfo: inline
        options:
          - BodiedRequestOptions: inline
          - TransactionalContentMd5: std::string, nullable
          - TransactionalContentCrc64: std::string, nullable
          - LeaseId: std::string, nullable
          - MaxSize: int64_t, nullable
          - AppendPosition: int64_t, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "appendblock"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-condition-maxsize", MaxSize]
          - [add_header_code, "x-ms-blob-condition-appendpos", AppendPosition]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-append-offset", AppendOffset]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - AppendBlockFromUri:
        http_method: Put
        http_status_code: 201
        return_type:
          AppendBlockFromUriResult:
            - BlobAppendInfo: inline
        options:
          - BasicRequestOptions: inline
          - SourceUri: std::string
          - SourceRange: std::pair<int64_t, int64_t>, nullable
          - TransactionalContentMd5: std::string, nullable
          - TransactionalContentCrc64: std::string, nullable
          - LeaseId: std::string, nullable
          - MaxSize: int64_t, nullable
          - AppendPosition: int64_t, nullable
          - BlobRequestCustomerProvidedKeyEncryptionOptions: inline
          - BlobRequestEncryptionScopeOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "appendblock"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source-range", SourceRange]
          - [add_header_code, "x-ms-source-content-md5", TransactionalContentMd5]
          - [add_header_code, "x-ms-source-content-crc64", TransactionalContentCrc64]
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - [add_header_code, "x-ms-blob-condition-maxsize", MaxSize]
          - [add_header_code, "x-ms-blob-condition-appendpos", AppendPosition]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-append-offset", AppendOffset]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - *RESPONSE_REQUEST_ENCRYPTION_HEADER_PACKAGE

    - Seal:
        http_method: Put
        http_status_code: 200
        return_type:
          SealAppendBlobResult:
            - BasicResponse: inline
            - ETag: std::string
            - LastModified: std::string
            - IsSealed: bool = true
        options:
          - BasicRequestOptions: inline
          - LeaseId: std::string, nullable
          - BlobRequestConditionalHeaders: inline
          - AppendPosition: int64_t, nullable
        request_action:
          - [add_query_code, "comp", "seal"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - [add_header_code, "x-ms-blob-condition-appendpos", AppendPosition]
        response_action:
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

  - BlobBatch:
    - SubmitBatch:
        http_method: Post
        http_status_code: 202
        return_type:
          SubmitBlobBatchResultInternal:
            - BasicResponse: inline
            - ContentType: std::string
        options:
          - BodiedRequestOptions: inline
          - ContentType: std::string
        request_action:
          - [add_body_code]
          - [add_query_code, "comp", "batch"]
          - *REQUEST_VERSION_TIMEOUT_PACKAGE
          - [add_header_code, "Content-Type", ContentType]
        response_action:
          - [get_header_code, "Content-Type", ContentType]


Models:
  BasicRequestOptions:
    - noexport: true
    - type: struct
    - Timeout: int32_t, nullable
  BodiedRequestOptions:
    - noexport: true
    - type: struct
    - BasicRequestOptions: inline
  BasicResponse:
    - noexport: true
    - type: struct
  BodiedResponse:
    - noexport: true
    - type: struct
    - BasicResponse: inline
    - BodyStream: std::unique_ptr<Azure::Core::Http::BodyStream>
  PublicAccessType:
    - type: enum class
    - Container: "container"
    - Blob: "blob"
    - Private: ""
  BlockType:
    - type: enum class
    - Committed
    - Uncommitted
    - Latest
  BlobType:
    - type: enum class
    - Unknown: ""
    - BlockBlob
    - PageBlob
    - AppendBlob
  BlobLeaseState:
    - type: enum class
    - Available: "available"
    - Leased: "leased"
    - Expired: "expired"
    - Breaking: "breaking"
    - Broken: "broken"
  BlobLeaseStatus:
    - type: enum class
    - Locked: "locked"
    - Unlocked: "unlocked"
  AccessTier:
    - type: enum class
    - Unknown: ""
    - P1
    - P2
    - P3
    - P4
    - P6
    - P10
    - P15
    - P20
    - P30
    - P40
    - P50
    - P60
    - P70
    - P80
    - Hot
    - Cool
    - Archive
  RehydratePriority:
    - type: enum class
    - Unknown: ""
    - High: "High"
    - Standard: "Standard"
  CopyStatus:
    - type: enum class
    - Unknown: ""
    - Success: "success"
    - Pending: "pending"
  SkuName:
    - type: enum class
    - Unknown: ""
    - StandardLrs: "Standard_LRS"
    - StandardGrs: "Standard_GRS"
    - StandardRagrs: "Standard_RAGRS"
    - StandardZrs: "Standard_ZRS"
    - PremiumLrs: "Premium_LRS"
    - PremiumZrs: "Premium_ZRS"
    - StandardGzrs: "Standard_GZRS"
    - StandardRagzrs: "Standard_RAGZRS"
  AccountKind:
    - type: enum class
    - Unknown: ""
    - Storage: "Storage"
    - BlobStorage: "BlobStorage"
    - StorageV2: "StorageV2"
    - FileStorage: "FileStorage"
    - BlockBlobStorage: "BlockBlobStorage"
  EncryptionAlgorithmType:
    - type: enum class
    - Unknown: ""
    - Aes256: "AES256"
  BlobBlock:
    - Name: std::string
    - Size: int64_t = 0
    - from_xml: [
      [text, Name, Name],
      [text, Size, Size],
    ]
  BlobAnalyticsLogging:
    - Version: std::string
    - Delete: bool = false
    - Read: bool = false
    - Write: bool = false
    - RetentionPolicy: BlobRetentionPolicy
    - from_xml: [
      [text, Version, Version],
      [text, Delete, Delete],
      [text, Read, Read],
      [text, Write, Write],
      [start_tag, RetentionPolicy, RetentionPolicy],
    ]
    - to_xml: [
      [tag, Version, Version],
      [tag, Delete, Delete],
      [tag, Read, Read],
      [tag, Write, Write],
      [tag, RetentionPolicy, RetentionPolicy],
    ]
  BlobMetrics:
    - Version: std::string
    - Enabled: bool = false
    - RetentionPolicy: BlobRetentionPolicy
    - IncludeApis: bool, nullable
    - from_xml: [
      [text, Version, Version],
      [text, Enabled, Enabled],
      [text, IncludeAPIs, IncludeApis],
      [start_tag, RetentionPolicy, RetentionPolicy],
    ]
    - to_xml: [
      [tag, Version, Version],
      [tag, Enabled, Enabled],
      [tag, IncludeAPIs, IncludeApis],
      [tag, RetentionPolicy, RetentionPolicy],
    ]
  BlobCorsRule:
    - AllowedOrigins: std::string
    - AllowedMethods: std::string
    - AllowedHeaders: std::string
    - ExposedHeaders: std::string
    - MaxAgeInSeconds: int32_t = 0
    - from_xml: [
      [text, AllowedOrigins, AllowedOrigins],
      [text, AllowedMethods, AllowedMethods],
      [text, MaxAgeInSeconds, MaxAgeInSeconds],
      [text, ExposedHeaders, ExposedHeaders],
      [text, AllowedHeaders, AllowedHeaders],
    ]
    - to_xml: [
      [tag, CorsRule.AllowedOrigins, AllowedOrigins],
      [tag, CorsRule.AllowedMethods, AllowedMethods],
      [tag, CorsRule.AllowedHeaders, AllowedHeaders],
      [tag, CorsRule.ExposedHeaders, ExposedHeaders],
      [tag, CorsRule.MaxAgeInSeconds, MaxAgeInSeconds],
    ]
  BlobRetentionPolicy:
    - Enabled: bool = false
    - Days: int32_t, nullable
    - from_xml: [
      [text, Enabled, Enabled],
      [text, Days, Days],
    ]
    - to_xml: [
      [tag, Enabled, Enabled],
      [tag, Days, Days],
    ]
  BlobStaticWebsite:
    - Enabled: bool = false
    - IndexDocument: std::string, nullable
    - DefaultIndexDocumentPath: std::string, nullable
    - ErrorDocument404Path: std::string, nullable
    - from_xml: [
      [text, Enabled, Enabled],
      [text, IndexDocument, IndexDocument],
      [text, DefaultIndexDocumentPath, DefaultIndexDocumentPath],
      [text, ErrorDocument404Path, ErrorDocument404Path],
    ]
    - to_xml: [
      [tag, Enabled, Enabled],
      [tag, IndexDocument, IndexDocument],
      [tag, DefaultIndexDocumentPath, DefaultIndexDocumentPath],
      [tag, ErrorDocument404Path, ErrorDocument404Path],
    ]
  BlobServiceProperties:
    - Logging: BlobAnalyticsLogging
    - HourMetrics: BlobMetrics
    - MinuteMetrics: BlobMetrics
    - Cors: std::vector<BlobCorsRule>
    - DefaultServiceVersion: std::string
    - DeleteRetentionPolicy: BlobRetentionPolicy
    - StaticWebsite: BlobStaticWebsite
    - from_xml: [
      [start_tag, StorageServiceProperties.Logging, Logging],
      [start_tag, StorageServiceProperties.HourMetrics, HourMetrics],
      [start_tag, StorageServiceProperties.MinuteMetrics, MinuteMetrics],
      [start_tag, StorageServiceProperties.Cors.CorsRule, Cors],
      [text, StorageServiceProperties.DefaultServiceVersion, DefaultServiceVersion],
      [start_tag, StorageServiceProperties.DeleteRetentionPolicy, DeleteRetentionPolicy],
      [start_tag, StorageServiceProperties.StaticWebsite, StaticWebsite],
    ]
    - to_xml: [
      [tag, Logging, Logging],
      [tag, HourMetrics, HourMetrics],
      [tag, MinuteMetrics, MinuteMetrics],
      [tag, Cors, Cors],
      [tag, DefaultServiceVersion, DefaultServiceVersion],
      [tag, DeleteRetentionPolicy, DeleteRetentionPolicy],
      [tag, StaticWebsite, StaticWebsite],
    ]
  BlobRequestConditionalHeaders:
    - noexport: true
    - IfModifiedSince: std::string, nullable
    - IfUnmodifiedSince: std::string, nullable
    - IfMatch: std::string, nullable
    - IfNoneMatch: std::string, nullable
  BlobRequestSourceConditionalHeaders:
    - noexport: true
    - SourceIfModifiedSince: std::string, nullable
    - SourceIfUnmodifiedSince: std::string, nullable
    - SourceIfMatch: std::string, nullable
    - SourceIfNoneMatch: std::string, nullable
  BlockInfo:
    - noexport: true
    - BasicResponse: inline
    - TransactionalContentMd5: std::string, nullable
    - TransactionalContentCrc64: std::string, nullable
    - BlobResponseEncryptionOptions: inline
  BlobHttpHeaders:
    - ContentType: std::string
    - ContentEncoding: std::string
    - ContentLanguage: std::string
    - ContentMd5: std::string
    - CacheControl: std::string
    - ContentDisposition: std::string
  BlobRequestCustomerProvidedKeyEncryptionOptions:
    - noexport: true
    - EncryptionKey: std::string, nullable
    - EncryptionKeySha256: std::string, nullable
    - EncryptionAlgorithm: EncryptionAlgorithmType, nullable
  BlobRequestEncryptionScopeOptions:
    - noexport: true
    - EncryptionScope: std::string, nullable
  BlobResponseEncryptionOptions:
    - noexport: true
    - ServerEncrypted: bool, nullable
    - EncryptionKeySha256: std::string, nullable
    - EncryptionScope: std::string, nullable
  BlobDownloadResponse:
    - noexport: true
    - type: struct
    - BodiedResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - ContentRange: std::string, nullable
    - HttpHeaders: BlobHttpHeaders
    - Metadata: std::map<std::string, std::string>
    - SequenceNumber: int64_t, nullable  # only for page blob
    - CommittedBlockCount: int64_t, nullable  # only for append blob
    - IsSealed: bool, nullable # only for append blob
    - BlobType: BlobType = BlobType::Unknown
    - TransactionalContentMd5: std::string, nullable  # Md5 for the downloaded range
    - TransactionalContentCrc64: std::string, nullable
    - LeaseDuration: std::string, nullable
    - LeaseState: BlobLeaseState, nullable
    - LeaseStatus: BlobLeaseStatus, nullable
    - BlobResponseEncryptionOptions: inline
    - ObjectReplicationDestinationPolicyId: std::string, nullable # only valid for replication destination blob
    - ObjectReplicationSourceProperties: std::vector<ObjectReplicationPolicy> # only valid for replication source blob
  BlobContentInfo:
    - noexport: true
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - VersionId: std::string, nullable
    - BlobResponseEncryptionOptions: inline
  BlobContainerItemWithoutName:
    - noexport: true
    - ETag: std::string
    - LastModified: std::string
    - Metadata: std::map<std::string, std::string>
    - AccessType: PublicAccessType = PublicAccessType::Private
    - HasImmutabilityPolicy: bool = false
    - HasLegalHold: bool = false
    - LeaseDuration: std::string, nullable
    - LeaseState: BlobLeaseState = BlobLeaseState::Available
    - LeaseStatus: BlobLeaseStatus = BlobLeaseStatus::Unlocked
    - DefaultEncryptionScope: std::string
    - PreventEncryptionScopeOverride: bool = false
  BlobContainerItem:
    - Name: std::string
    - BlobContainerItemWithoutName: inline
    - IsDeleted: bool = false
    - VersionId: std::string, nullable
    - DeletedTime: std::string, nullable
    - RemainingRetentionDays: int32_t, nullable
    - from_xml: [
      [text, Name, Name],
      [text, Properties.Etag, ETag],
      [text, Properties.Last-Modified, LastModified],
      [text, Properties.PublicAccess, AccessType],
      [text, Properties.HasImmutabilityPolicy, HasImmutabilityPolicy],
      [text, Properties.HasLegalHold, HasLegalHold],
      [text, Properties.LeaseStatus, LeaseStatus],
      [text, Properties.LeaseState, LeaseState],
      [text, Properties.LeaseDuration, LeaseDuration],
      [text, Properties.DefaultEncryptionScope, DefaultEncryptionScope],
      [text, Properties.DenyEncryptionScopeOverride, PreventEncryptionScopeOverride],
      [start_tag, Metadata, Metadata],
      [text, Deleted, IsDeleted],
      [text, Version, VersionId],
      [text, Properties.DeletedTime, DeletedTime],
      [text, Properties.RemainingRetentionDays, RemainingRetentionDays],
    ]
  BlobItem:
    - Name: std::string
    - Deleted: bool = false
    - Snapshot: std::string
    - VersionId: std::string, nullable
    - IsCurrentVersion: bool, nullable
    - HttpHeaders: BlobHttpHeaders
    - Metadata: std::map<std::string, std::string>
    - CreationTime: std::string
    - LastModified: std::string
    - ETag: std::string
    - ContentLength: int64_t = 0
    - BlobType: BlobType = BlobType::Unknown
    - Tier: AccessTier, nullable
    - AccessTierInferred: bool, nullable
    - LeaseStatus: BlobLeaseStatus = BlobLeaseStatus::Unlocked
    - LeaseState: BlobLeaseState = BlobLeaseState::Available
    - LeaseDuration: std::string, nullable
    - BlobResponseEncryptionOptions: inline
    - SequenceNumber: int64_t, nullable # only for page blobd
    - IsSealed: bool, nullable # only for append blob
    - ObjectReplicationSourceProperties: std::vector<ObjectReplicationPolicy> # only valid for replication source blob
    - from_xml: [
      [text, Name, Name],
      [text, Deleted, Deleted],
      [text, Snapshot, Snapshot],
      [text, VersionId, VersionId],
      [text, IsCurrentVersion, IsCurrentVersion],
      [text, Properties.Content-Type, HttpHeaders.ContentType],
      [text, Properties.Content-Encoding, HttpHeaders.ContentEncoding],
      [text, Properties.Content-Language, HttpHeaders.ContentLanguage],
      [text, Properties.Content-MD5, HttpHeaders.ContentMd5],
      [text, Properties.Cache-Control, HttpHeaders.CacheControl],
      [text, Properties.Content-Disposition, HttpHeaders.ContentDisposition],
      [text, Properties.Creation-Time, CreationTime],
      [text, Properties.Last-Modified, LastModified],
      [text, Properties.Etag, ETag],
      [text, Properties.Content-Length, ContentLength],
      [text, Properties.BlobType, BlobType],
      [text, Properties.AccessTier, Tier],
      [text, Properties.AccessTierInferred, AccessTierInferred],
      [text, Properties.LeaseStatus, LeaseStatus],
      [text, Properties.LeaseState, LeaseState],
      [text, Properties.LeaseDuration, LeaseDuration],
      [text, Properties.ServerEncrypted, ServerEncrypted],
      [text, Properties.EncryptionKeySHA256, EncryptionKeySha256],
      [text, Properties.Sealed, IsSealed],
      [text, Properties.x-ms-blob-sequence-number, SequenceNumber],
      [start_tag, Metadata, Metadata],
      [start_tag, OrMetadata, ObjectReplicationSourceProperties],
    ]
  BlobPrefix:
    - Name: std::string
    - from_xml: [
      [text, Name, Name],
    ]
  ListBlobsIncludeItem:
    - type: bitwise enum
    - None: ""
    - Copy: "copy"
    - Deleted: "deleted"
    - Metadata: "metadata"
    - Snapshots: "snapshots"
    - Versions: "versions"
    - UncomittedBlobs: "uncommittedblobs"
  BlobContainerInfo:
    - noexport: true
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
  ListBlobContainersIncludeItem:
    - type: bitwise enum
    - None: ""
    - Metadata: "metadata"
    - Deleted: "deleted"
  BlockListTypeOption:
    - type: enum class
    - Committed: "committed"
    - Uncommitted: "uncommitted"
    - All: "all"
  DeleteSnapshotsOption:
    - type: enum class
    - None: ""
    - IncludeSnapshots: "include"
    - Only: "only"
  BlobArchiveStatus:
    - type: enum class
    - Unknown: ""
    - RehydratePendingToHot: "rehydrate-pending-to-hot"
    - RehydratePendingToCool: "rehydrate-pending-to-cool"
  ObjectReplicationStatus:
    - type: enum class
    - Unknown: ""
    - Complete: "complete"
    - Failed: "failed"
  ObjectReplicationRule:
    - RuleId: std::string
    - ReplicationStatus: ObjectReplicationStatus = ObjectReplicationStatus::Unknown
  ObjectReplicationPolicy:
    - PolicyId: std::string
    - Rules: std::vector<ObjectReplicationRule>
  BlobProperties:
    - noexport: true
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - CreationTime: std::string
    - Metadata: std::map<std::string, std::string>
    - BlobType: BlobType = BlobType::Unknown
    - LeaseDuration: std::string, nullable
    - LeaseState: BlobLeaseState, nullable
    - LeaseStatus: BlobLeaseStatus, nullable
    - ContentLength: int64_t = 0
    - HttpHeaders: BlobHttpHeaders
    - SequenceNumber: int64_t, nullable  # only for page blob
    - CommittedBlockCount: int32_t, nullable  # only for append blob
    - IsSealed: bool, nullable # only for append blob
    - BlobResponseEncryptionOptions: inline
    - Tier: AccessTier, nullable
    - AccessTierInferred: bool, nullable
    - ArchiveStatus: BlobArchiveStatus, nullable
    - AccessTierChangeTime: std::string, nullable
    - CopyId: std::string, nullable
    - CopySource: std::string, nullable
    - CopyStatus: CopyStatus, nullable
    - CopyProgress: std::string, nullable
    - CopyCompletionTime: std::string, nullable
    - ObjectReplicationDestinationPolicyId: std::string, nullable # only valid for replication destination blob
    - ObjectReplicationSourceProperties: std::vector<ObjectReplicationPolicy> # only valid for replication source blob
  BlobInfo:
    - noexport: true
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - SequenceNumber: int64_t, nullable
  BlobCopyInfo:
    - noexport: true
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - CopyId: std::string
    - CopyStatus: CopyStatus = CopyStatus::Unknown
    - VersionId: std::string, nullable
  UserDelegationKey:
    - noexport: true
    - BasicResponse: inline
    - SignedObjectId: std::string
    - SignedTenantId: std::string
    - SignedStartsOn: std::string
    - SignedExpiresOn: std::string
    - SignedService: std::string
    - SignedVersion: std::string
    - Value: std::string
    - from_xml: [
      [text, UserDelegationKey.SignedOid, SignedObjectId],
      [text, UserDelegationKey.SignedTid, SignedTenantId],
      [text, UserDelegationKey.SignedStart, SignedStartsOn],
      [text, UserDelegationKey.SignedExpiry, SignedExpiresOn],
      [text, UserDelegationKey.SignedService, SignedService],
      [text, UserDelegationKey.SignedVersion, SignedVersion],
      [text, UserDelegationKey.Value, Value],
    ]
  PageInfo:
    - noexport: true
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - TransactionalContentMd5: std::string, nullable
    - TransactionalContentCrc64: std::string, nullable
    - SequenceNumber: int64_t = 0
    - BlobResponseEncryptionOptions: inline
  BlobAppendInfo:
    - noexport: true
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - TransactionalContentMd5: std::string, nullable
    - TransactionalContentCrc64: std::string, nullable
    - AppendOffset: int64_t = 0
    - CommittedBlockCount: int64_t = 0
    - BlobResponseEncryptionOptions: inline
  BlobGeoReplicationStatus:
    - type: enum class
    - Unknown: ""
    - Live: "live"
    - Bootstrap: "bootstrap"
    - Unavailable: "unavailable"
  BlobGeoReplication:
    - Status: BlobGeoReplicationStatus = BlobGeoReplicationStatus::Unknown
    - LastSyncTime: std::string, nullable
    - from_xml: [
      [text, Status, Status],
      [text, LastSyncTime, LastSyncTime],
    ]
  BlobSignedIdentifier:
    - Id: std::string
    - StartsOn: std::string
    - ExpiresOn: std::string
    - Permissions: std::string
    - from_xml: [
      [text, Id, Id],
      [text, AccessPolicy.Start, StartsOn],
      [text, AccessPolicy.Expiry, ExpiresOn],
      [text, AccessPolicy.Permission, Permissions],
    ]
    - to_xml: [
      [tag, SignedIdentifier.Id, Id],
      [tag, SignedIdentifier.AccessPolicy.Start, StartsOn],
      [tag, SignedIdentifier.AccessPolicy.Expiry, ExpiresOn],
      [tag, SignedIdentifier.AccessPolicy.Permission, Permissions],
    ]
  BlobContainerAccessPolicy:
    - noexport: true
    - AccessType: PublicAccessType = PublicAccessType::Private
    - ETag: std::string
    - LastModified: std::string
    - SignedIdentifiers: std::vector<BlobSignedIdentifier>
    - from_xml: [
      [start_tag, SignedIdentifiers.SignedIdentifier, SignedIdentifiers],
    ]
  BlobLease:
    - noexport: true
    - ETag: std::string
    - LastModified: std::string
    - LeaseId: std::string
