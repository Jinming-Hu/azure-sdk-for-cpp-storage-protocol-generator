service_name: Blobs
output: generated/blob_rest_client.hpp

request_version_date_id_package: &REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
  - [add_header_code, "x-ms-version", "2019-07-07"]

response_version_date_id_package: &RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
  - [get_header_code, "x-ms-version", Version]
  - [get_header_code, "Date", Date]
  - [get_header_code, "x-ms-request-id", RequestId]
  - [get_header_code, "x-ms-client-request-id", ClientRequestId, optional]

request_encryption_package: &REQUEST_ENCRYPTION_HEADER_PACKAGE
  - [add_header_code, "x-ms-encryption-key", EncryptionKey, optional]
  - [add_header_code, "x-ms-encryption-key-sha256", EncryptionKeySHA256, optional]
  - [add_header_code, "x-ms-encryption-algorithm", EncryptionAlgorithm, optional]

response_encryption_package: &RESPONSE_ENCRYPTION_HEADER_PACKAGE
  - [get_header_code, "x-ms-server-encrypted", ServerEncrypted, optional]
  - [get_header_code, "x-ms-encryption-key-sha256", EncryptionKeySHA256, optional]

response_etag_last_modified_package: &RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
  - [get_header_code, "ETag", ETag]
  - [get_header_code, "Last-Modified", LastModified]

request_checksum_package: &REQUEST_CHECKSUM_HEADER_PACKAGE
  - [add_header_code, "Content-MD5", ContentMD5, optional]
  - [add_header_code, "x-ms-content-crc64", ContentCRC64, optional]

response_checksum_package: &RESPONSE_CHECKSUM_HEADER_PACKAGE
  - [get_header_code, "Content-MD5", ContentMD5, optional]
  - [get_header_code, "x-ms-content-crc64", ContentCRC64, optional]

request_mime_package: &REQUEST_MIME_HEADER_PACKAGE
  - [add_header_code, "x-ms-blob-content-type", Properties.ContentType, optional]
  - [add_header_code, "x-ms-blob-content-encoding", Properties.ContentEncoding, optional]
  - [add_header_code, "x-ms-blob-content-language", Properties.ContentLanguage, optional]
  - [add_header_code, "x-ms-blob-cache-control", Properties.CacheControl, optional]
  - [add_header_code, "x-ms-blob-content-md5", Properties.ContentMD5, optional]
  - [add_header_code, "x-ms-blob-content-disposition", Properties.ContentDisposition, optional]

response_mime_package: &RESPONSE_MIME_HEADER_PACKAGE
  - [get_header_code, "Content-Type", Properties.ContentType, optional]
  - [get_header_code, "Content-Encoding", Properties.ContentEncoding, optional]
  - [get_header_code, "Content-Language", Properties.ContentLanguage, optional]
  - [get_header_code, "Cache-Control", Properties.CacheControl, optional]
  - [get_header_code, "Content-MD5", Properties.ContentMD5, optional]
  - [get_header_code, "Content-Disposition", Properties.ContentDisposition, optional]

response_lease_package: &RESPONSE_LEASE_HEADER_PACKAGE
  - [get_header_code, "x-ms-lease-status", LeaseStatus, optional]
  - [get_header_code, "x-ms-lease-state", LeaseState, optional]
  - [get_header_code, "x-ms-lease-duration", LeaseDuration, optional]

request_conditional_headers_package: &REQUEST_CONDITIONAL_HEADER_PACKAGE
  - [add_header_code, "If-Modified-Since", IfModifiedSince, optional]
  - [add_header_code, "If-Unmodified-Since", IfUnmodifiedSince, optional]
  - [add_header_code, "If-Match", IfMatch, optional]
  - [add_header_code, "If-None-Match", IfNoneMatch, optional]

request_source_conditional_headers_package: &REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
  - [add_header_code, "x-ms-source-if-modified-since", SourceIfModifiedSince, optional]
  - [add_header_code, "x-ms-source-if-unmodified-since", SourceIfUnmodifiedSince, optional]
  - [add_header_code, "x-ms-source-if-match", SourceIfMatch, optional]
  - [add_header_code, "x-ms-source-if-none-match", SourceIfNoneMatch, optional]

Services:
  - Service:
    - ListBlobContainers:
        http_method: Get
        http_status_code: 200
        return_type:
          ListContainersSegment:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - Prefix: std::string
            - Marker: std::string
            - NextMarker: std::string
            - MaxResults: int = 0
            - BlobContainerItems: std::vector<BlobContainerItem>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.Marker, Marker],
              [text, EnumerationResults.NextMarker, NextMarker],
              [text, EnumerationResults.MaxResults, MaxResults],
              [start_tag, EnumerationResults.Containers.Container, BlobContainerItems],
            ]
        options:
          - BasicRequestOptions: inline
          - Prefix: std::string
          - Marker: std::string
          - MaxResults: int = 0
          - IncludeMetadata: ListBlobContainersIncludeOption = ListBlobContainersIncludeOption::None
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix, optional]
          - [add_query_code, "marker", Marker, optional]
          - [add_query_code, "maxresults", MaxResults, optional(0)]
          - [add_query_code, "include", IncludeMetadata, optional]
        response_action:
          - [get_xml_body_code]  # must be the first
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

    - GetUserDelegationKey:
        http_method: Post
        http_status_code: 200
        return_type: UserDelegationKey
        options:
          - BasicRequestOptions: inline
          - StartsOn: std::string
          - ExpiresOn: std::string
          - to_xml: [
            [tag, KeyInfo.Start, StartsOn],
            [tag, KeyInfo.Expiry, ExpiresOn],
          ]
        request_action:
          - [add_xml_body_code]  # must be the first one
          - [add_query_code, "restype", "service"]
          - [add_query_code, "comp", "userdelegationkey"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
        response_action:
          - [get_xml_body_code]  # must be the first
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

  - Container:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type: BlobContainerInfo
        options:
          - BasicRequestOptions: inline
          - AccessType: PublicAccessType = PublicAccessType::Private
          - Metadata: std::map<std::string, std::string>
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-blob-public-access", AccessType, optional]
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - Delete:
        http_method: Delete
        http_status_code: 202
        return_type: BasicResponse
        options:
          - BasicRequestOptions: inline
          - IfModifiedSince: std::string
          - IfUnmodifiedSince: std::string
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_header_code, "If-Modified-Since", IfModifiedSince, optional]
          - [add_header_code, "If-Unmodified-Since", IfUnmodifiedSince, optional]
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

    - GetProperties:
        http_method: Head
        http_status_code: 200
        return_type:
          BlobContainerProperties:
            - BasicResponse: inline
            - BlobContainerItemWithoutName: inline
        options:
          - BasicRequestOptions: inline
          - BlobRequestEncryptionOptions: inline
        request_action:
          - [add_query_code, "restype", "container"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - [get_header_code, "x-ms-blob-public-access", AccessType, optional]
          - [get_header_code, "x-ms-has-immutability-policy", HasImmutabilityPolicy]
          - [get_header_code, "x-ms-has-legal-hold", HasLegalHold]
          - *RESPONSE_LEASE_HEADER_PACKAGE

    - SetMetadata:
        http_method: Put
        http_status_code: 200
        return_type: BlobContainerInfo
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - IfModifiedSince: std::string
        request_action:
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "metadata"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "If-Modified-Since", IfModifiedSince, optional]
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - ListBlobs:
        http_method: Get
        http_status_code: 200
        return_type:
          BlobsFlatSegment:
            - BasicResponse: inline
            - ServiceEndpoint: std::string
            - Container: std::string
            - Prefix: std::string
            - Marker: std::string
            - NextMarker: std::string
            - MaxResults: int = 0
            - Delimiter: std::string
            - BlobItems: std::vector<BlobItem>
            - from_xml: [
              [attribute, EnumerationResults, ServiceEndpoint, ServiceEndpoint],
              [attribute, EnumerationResults, ContainerName, Container],
              [text, EnumerationResults.Prefix, Prefix],
              [text, EnumerationResults.Marker, Marker],
              [text, EnumerationResults.NextMarker, NextMarker],
              [text, EnumerationResults.MaxResults, MaxResults],
              [text, EnumerationResults.Delimiter, Delimiter],
              [start_tag, EnumerationResults.Blobs.Blob, BlobItems],
            ]
        options:
          - BasicRequestOptions: inline
          - Prefix: std::string
          - Delimiter: std::string
          - Marker: std::string
          - MaxResults: int = 0
          - Include: std::vector<ListBlobsIncludeItem>
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_query_code, "restype", "container"]
          - [add_query_code, "comp", "list"]
          - [add_query_code, "prefix", Prefix, optional]
          - [add_query_code, "delimiter", Delimiter, optional]
          - [add_query_code, "marker", Marker, optional]
          - [add_query_code, "maxresults", MaxResults, optional(0)]
          - [add_query_code, "include", Include, optional]
        response_action:
          - [get_xml_body_code]  # must be the first
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

  - Blob:
    - Download:
        http_method: Get
        http_status_code: [200, 206]
        return_type: FlattenedDownloadProperties
        options:
          - BasicRequestOptions: inline
          - Range: std::pair<uint64_t, uint64_t>
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_range_header_code, "x-ms-range", Range, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_MIME_HEADER_PACKAGE
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE
          - *RESPONSE_LEASE_HEADER_PACKAGE
          - [get_header_code, "Content-Range", ContentRange, optional]
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber, optional]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount, optional]
          - [get_header_code, "x-ms-blob-type", BlobType]
          - [get_body_code, BodyBuffer]
          # BodyStream not implemented yet
          # - [get_body_code, BodyStream]

    - Delete:
        http_method: Delete
        http_status_code: 202
        return_type: BasicResponse
        options:
          - BasicRequestOptions: inline
          - DeleteSnapshots: DeleteSnapshotsOption = DeleteSnapshotsOption::None
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_header_code, "x-ms-delete-snapshots", DeleteSnapshots, optional]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

    - Undelete:
        http_method: Put
        http_status_code: 200
        return_type: BasicResponse
        options:
          - BasicRequestOptions: inline
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_query_code, "comp", "undelete"]
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

    - GetProperties:
        http_method: Head
        http_status_code: 200
        return_type: BlobProperties
        options:
          - BasicRequestOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-creation-time", CreationTime]
          - [get_metadata_code, "x-ms-meta-", Metadata, optional]
          - [get_header_code, "x-ms-blob-type", BlobType]
          - *RESPONSE_LEASE_HEADER_PACKAGE
          - [get_header_code, "Content-Length", ContentLength]
          - *RESPONSE_MIME_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber, optional]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount, optional]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE
          - [get_header_code, "x-ms-access-tier", Tier, optional]
          - [get_header_code, "x-ms-access-tier-inferred", AccessTierInferred, optional]
          - [get_header_code, "x-ms-archive-status", ArchiveStatus, optional]
          - [get_header_code, "x-ms-access-tier-change-time", AccessTierChangeTime, optional]

    - SetHttpHeaders:
        http_method: Put
        http_status_code: 200
        return_type: BlobInfo
        options:
          - BasicRequestOptions: inline
          - BlobHttpHeaders: inline
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber, optional]

    - SetMetadata:
        http_method: Put
        http_status_code: 200
        return_type: BlobInfo
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "metadata"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE

    - SetAccessTier:
        http_method: Put
        http_status_code: [200, 202]
        return_type: BasicResponse
        options:
          - BasicRequestOptions: inline
          - Tier: AccessTier = AccessTier::Unknown
          - RehydratePriority: RehydratePriority = RehydratePriority::Unknown
        request_action:
          - [add_query_code, "comp", "tier"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_header_code, "x-ms-access-tier", Tier]
          - [add_header_code, "x-ms-rehydrate-priority", RehydratePriority, optional]
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

    - StartCopyFromUri:
        http_method: Put
        http_status_code: 202
        return_type: BlobCopyInfo
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - SourceUri: std::string
          - LeaseId: std::string
          - SourceLeaseId: std::string
          - Tier: AccessTier = AccessTier::Unknown
          - RehydratePriority: RehydratePriority = RehydratePriority::Unknown
          - BlobRequestConditionalHeaders: inline
          - BlobRequestSourceConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - [add_header_code, "x-ms-source-lease-id", SourceLeaseId, optional]
          - [add_header_code, "x-ms-access-tier", Tier, optional]
          - [add_header_code, "x-ms-rehydrate-priority", RehydratePriority, optional]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
          - *REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-status", CopyStatus]

    - AbortCopyFromUri:
        http_method: Put
        http_status_code: 204
        return_type: BasicResponse
        options:
          - BasicRequestOptions: inline
          - CopyId: std::string
          - LeaseId: std::string
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_query_code, "comp", "copy"]
          - [add_query_code, "copyid", CopyId]
          - [add_header_code, "x-ms-copy-action", "abort"]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE

    - CreateSnapshot:
        http_method: Put
        http_status_code: 201
        return_type: BlobSnapshotInfo
        options:
          - BasicRequestOptions: inline
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "snapshot"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE
          - [get_header_code, "x-ms-snapshot", Snapshot]

  - BlockBlob:
    - Upload:
        http_method: Put
        http_status_code: 201
        return_type: BlobContentInfo
        options:
          - BodiedRequestOptions: inline
          - ContentMD5: std::string
          - ContentCRC64: std::string
          - Properties: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string
          - Tier: AccessTier = AccessTier::Unknown
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_body_code, BodyBuffer]  # must be the first one
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - [add_header_code, "x-ms-blob-type", "BlockBlob"]
          - [add_header_code, "x-ms-access-tier", Tier, optional]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - StageBlock:
        http_method: Put
        http_status_code: 201
        return_type: BlockInfo
        options:
          - BodiedRequestOptions: inline
          - BlockId: std::string
          - ContentMD5: std::string
          - ContentCRC64: std::string
          - LeaseId: std::string
          - BlobRequestEncryptionOptions: inline
        request_action:
          - [add_body_code, BodyBuffer]  # must be the first one
          # Stream not implemented yet
          #- [add_body_code, BodyStream]
          - [add_query_code, "comp", "block"]
          - [add_query_code, "blockid", BlockId]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - StageBlockFromUri:
        http_method: Put
        http_status_code: 201
        return_type: BlockInfo
        options:
          - BasicRequestOptions: inline
          - BlockId: std::string
          - SourceUri: std::string
          - SourceRange: std::pair<uint64_t, uint64_t>
          - ContentMD5: std::string
          - ContentCRC64: std::string
          - LeaseId: std::string
          - BlobRequestEncryptionOptions: inline
          - BlobRequestSourceConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "block"]
          - [add_query_code, "blockid", BlockId]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source_range", SourceRange, optional]
          - [add_header_code, "x-ms-source-content-md5", ContentMD5, optional]
          - [add_header_code, "x-ms-source-content-crc64", ContentCRC64, optional]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_SOURCE_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - CommitBlockList:
        http_method: Put
        http_status_code: 201
        return_type: BlobContentInfo
        options:
          - BasicRequestOptions: inline
          - BlockList: std::vector<std::pair<BlockType, std::string>>
          - Properties: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
          - Tier: AccessTier = AccessTier::Unknown
          - to_xml: [
            [tag, BlockList, BlockList]
          ]
        request_action:
          - [add_xml_body_code]  # must be the first one
          - [add_query_code, "comp", "blocklist"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - [add_header_code, "x-ms-access-tier", Tier, optional]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - GetBlockList:
        http_method: Get
        http_status_code: 200
        options:
            - BasicRequestOptions: inline
            - ListType: BlockListTypeOption = BlockListTypeOption::All
            - BlobRequestConditionalHeaders: inline
        return_type:
          BlobBlockListInfo:
            - BasicResponse: inline
            - ETag: std::string
            - LastModified: std::string
            - ContentType: std::string
            - ContentLength: uint64_t = 0
            - CommittedBlocks: std::vector<BlobBlock>
            - UncommittedBlocks: std::vector<BlobBlock>
            - from_xml: [
              [start_tag, BlockList.CommittedBlocks.Block, CommittedBlocks],
              [start_tag, BlockList.UncommittedBlocks.Block, UncommittedBlocks],
            ]
        request_action:
            - [add_query_code, "comp", "blocklist"]
            - [add_query_code, "blocklisttype", ListType, optional]
            - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
            - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
            - [get_xml_body_code]  # must be the first
            - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
            - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
            - [get_header_code, "Content-Type", ContentType]
            - [get_header_code, "x-ms-blob-content-length", ContentLength]

  - PageBlob:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type: BlobContentInfo
        options:
          - BasicRequestOptions: inline
          - BlobContentLength: uint64_t
          - SequenceNumber: uint64_t = 0
          - Properties: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string
          - Tier: AccessTier = AccessTier::Unknown
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - [add_header_code, "x-ms-blob-type", "PageBlob"]
          - [add_header_code, "x-ms-blob-content-length", BlobContentLength]
          - [add_header_code, "x-ms-blob-sequence-number", SequenceNumber]
          - [add_header_code, "x-ms-access-tier", Tier, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - UploadPages:
        http_method: Put
        http_status_code: 201
        options:
          - BodiedRequestOptions: inline
          - Range: std::pair<uint64_t, uint64_t>
          - ContentMD5: std::string
          - ContentCRC64: std::string
          - LeaseId: std::string
          # - IfSequenceNumberLessThanOrEqualTo: Azure::Core::Optional<uint64_t>  # TODO
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        return_type: PageInfo
        request_action:
          - [add_body_code, BodyBuffer]  # must be the first one
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-page-write", "update"]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber, optional]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - UploadPagesFromUri:
        http_method: Put
        http_status_code: 201
        options:
          - BasicRequestOptions: inline
          - SourceUri: std::string
          - SourceRange: std::pair<uint64_t, uint64_t>
          - Range: std::pair<uint64_t, uint64_t>
          - ContentMD5: std::string
          - ContentCRC64: std::string
          - LeaseId: std::string
          # - IfSequenceNumberLessThanOrEqualTo: Azure::Core::Optional<uint64_t>  # TODO
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        return_type: PageInfo
        request_action:
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-copy-source", SourceUri]
          - [add_range_header_code, "x-ms-source-range", SourceRange]
          - [add_header_code, "x-ms-source-content-md5", ContentMD5, optional]
          - [add_header_code, "x-ms-source-content-crc64", ContentCRC64, optional]
          - [add_header_code, "x-ms-page-write", "update"]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber, optional]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - ClearPages:
        http_method: Put
        http_status_code: 201
        options:
          - BasicRequestOptions: inline
          - Range: std::pair<uint64_t, uint64_t>
          - LeaseId: std::string
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        return_type: PageInfo
        request_action:
          - [add_query_code, "comp", "page"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_range_header_code, "x-ms-range", Range]
          - [add_header_code, "x-ms-page-write", "clear"]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber, optional]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - Resize:
        http_method: Put
        http_status_code: 200
        return_type: PageBlobInfo
        options:
          - BasicRequestOptions: inline
          - BlobContentLength: uint64_t
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "properties"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_header_code, "x-ms-blob-content-length", BlobContentLength]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-sequence-number", SequenceNumber, optional]

    - GetPageRanges:
        http_method: Get
        http_status_code: 200
        return_type: PageRangesInfo
        options:
          - BasicRequestOptions: inline
          - PreviousSnapshot: std::string
          - PreviousSnapshotUrl: std::string
          - Range: std::pair<uint64_t, uint64_t>
          - LeaseId: std::string
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "pagelist"]
          - [add_query_code, "prevsnapshot", PreviousSnapshot, optional]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_range_header_code, "x-ms-range", Range, optional]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - [add_header_code, "x-ms-previous-snapshot-url", PreviousSnapshotUrl, optional]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - [get_xml_body_code]  # must be the first
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-content-length", BlobContentLength]

    - CopyIncremental:
        http_method: Put
        http_status_code: 202
        return_type: BlobCopyInfo
        options:
          - BasicRequestOptions: inline
          - CopySource: std::string
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_query_code, "comp", "incrementalcopy"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - [add_header_code, "x-ms-copy-source", CopySource]
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - [get_header_code, "x-ms-copy-id", CopyId]
          - [get_header_code, "x-ms-copy-status", CopyStatus]

  - AppendBlob:
    - Create:
        http_method: Put
        http_status_code: 201
        return_type: BlobContentInfo
        options:
          - BasicRequestOptions: inline
          - Properties: BlobHttpHeaders
          - Metadata: std::map<std::string, std::string>
          - LeaseId: std::string
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_MIME_HEADER_PACKAGE
          - [add_metadata_code, "x-ms-meta-", Metadata]
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - [add_header_code, "x-ms-blob-type", "AppendBlob"]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

    - AppendBlock:
        http_method: Put
        http_status_code: 201
        return_type: BlobAppendInfo
        options:
          - BodiedRequestOptions: inline
          - ContentMD5: std::string
          - ContentCRC64: std::string
          - LeaseId: std::string
          - MaxSize: uint64_t = std::numeric_limits<uint64_t>::max()
          - AppendPosition: uint64_t = std::numeric_limits<uint64_t>::max()
          - BlobRequestEncryptionOptions: inline
          - BlobRequestConditionalHeaders: inline
        request_action:
          - [add_body_code, BodyBuffer]  # must be the first one
          - [add_query_code, "comp", "appendblock"]
          - *REQUEST_VERSION_DATE_ID_HEADER_PACKAGE
          - *REQUEST_CHECKSUM_HEADER_PACKAGE
          - [add_header_code, "x-ms-lease-id", LeaseId, optional]
          - [add_header_code, "x-ms-blob-condition-maxsize", MaxSize, optional(std::numeric_limits<uint64_t>::max())]
          - [add_header_code, "x-ms-blob-condition-appendpos", AppendPosition, optional(std::numeric_limits<uint64_t>::max())]
          - *REQUEST_ENCRYPTION_HEADER_PACKAGE
          - *REQUEST_CONDITIONAL_HEADER_PACKAGE
        response_action:
          - *RESPONSE_VERSION_DATE_ID_HEADER_PACKAGE
          - *RESPONSE_ETAG_LAST_MODIFIED_HEADER_PACKAGE
          - *RESPONSE_CHECKSUM_HEADER_PACKAGE
          - [get_header_code, "x-ms-blob-append-offset", AppendOffset]
          - [get_header_code, "x-ms-blob-committed-block-count", CommittedBlockCount]
          - *RESPONSE_ENCRYPTION_HEADER_PACKAGE

Models:
  BasicRequestOptions:
    - type: struct
  BodiedRequestOptions:
    - type: struct
    - BasicRequestOptions: inline
    - BodyBuffer: std::vector<uint8_t>* = nullptr
    - BodyStream: Azure::Core::Http::BodyStream* = nullptr
  BasicResponse:
    - type: struct
    - RequestId: std::string
    - Date: std::string
    - Version: std::string
    - ClientRequestId: std::string
  BodiedResponse:
    - type: struct
    - BasicResponse: inline
    - BodyBuffer: std::vector<uint8_t>
    - BodyStream: Azure::Core::Http::BodyStream* = nullptr
  PublicAccessType:
    - type: enum class
    - Container: "container"
    - Blob: "blob"
    - Private: ""
  BlockType:
    - type: enum class
    - Committed
    - Uncommitted
    - Latest
  BlobType:
    - type: enum class
    - Unknown: ""
    - BlockBlob
    - PageBlob
    - AppendBlob
  BlobLeaseState:
    - type: enum class
    - Available: "available"
    - Leased: "leased"
    - Expired: "expired"
    - Breaking: "breaking"
    - Broken: "broken"
  BlobLeaseStatus:
    - type: enum class
    - Locked: "locked"
    - Unlocked: "unlocked"
  AccessTier:
    - type: enum class
    - Unknown: ""
    - P1
    - P2
    - P3
    - P4
    - P6
    - P10
    - P15
    - P20
    - P30
    - P40
    - P50
    - P60
    - P70
    - P80
    - Hot
    - Cool
    - Archive
  RehydratePriority:
    - type: enum class
    - Unknown: ""
    - High: "High"
    - Standard: "Standard"
  CopyStatus:
    - type: enum class
    - Unknown: ""
    - Success: "success"
    - Pending: "pending"
  BlobBlock:
    - Name: std::string
    - Size: uint64_t = 0
    - from_xml: [
      [text, Name, Name],
      [text, Size, Size],
    ]
  BlobRequestConditionalHeaders:
    - IfModifiedSince: std::string
    - IfUnmodifiedSince: std::string
    - IfMatch: std::string
    - IfNoneMatch: std::string
  BlobRequestSourceConditionalHeaders:
    - SourceIfModifiedSince: std::string
    - SourceIfUnmodifiedSince: std::string
    - SourceIfMatch: std::string
    - SourceIfNoneMatch: std::string
  BlockInfo:
    - BasicResponse: inline
    - ContentMD5: std::string
    - ContentCRC64: std::string
    - BlobResponseEncryptionOptions: inline
  BlobHttpHeaders:
    - ContentType: std::string
    - ContentEncoding: std::string
    - ContentLanguage: std::string
    - ContentMD5: std::string
    - CacheControl: std::string
    - ContentDisposition: std::string
  BlobRequestEncryptionOptions:
    - noexport: true
    - EncryptionKey: std::string
    - EncryptionKeySHA256: std::string
    - EncryptionAlgorithm: std::string
  BlobResponseEncryptionOptions:
    - noexport: true
    - ServerEncrypted: bool = true
    - EncryptionKeySHA256: std::string
  FlattenedDownloadProperties:
    - type: struct
    - BodiedResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - ContentRange: std::string
    - Properties: BlobHttpHeaders
    - Metadata: std::map<std::string, std::string>
    - SequenceNumber: uint64_t = 0  # only for page blob
    - CommittedBlockCount: uint64_t = 0  # only for append blob
    - BlobType: BlobType = BlobType::Unknown
    - ContentMD5: std::string  # MD5 for the downloaded range
    - ContentCRC64: std::string
    - LeaseDuration: std::string
    - LeaseState: BlobLeaseState = BlobLeaseState::Available
    - LeaseStatus: BlobLeaseStatus = BlobLeaseStatus::Unlocked
    - BlobResponseEncryptionOptions: inline
  BlobContentInfo:
    - type: struct
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - ContentMD5: std::string
    - ContentCRC64: std::string
    - SequenceNumber: uint64_t = 0
    - BlobResponseEncryptionOptions: inline
  BlobContainerItemWithoutName:
    - noexport: true
    - ETag: std::string
    - LastModified: std::string
    - Metadata: std::map<std::string, std::string>
    - AccessType: PublicAccessType = PublicAccessType::Private
    - HasImmutabilityPolicy: bool = false
    - HasLegalHold: bool = false
    - LeaseDuration: std::string
    - LeaseState: BlobLeaseState = BlobLeaseState::Available
    - LeaseStatus: BlobLeaseStatus = BlobLeaseStatus::Unlocked
  BlobContainerItem:
    - Name: std::string
    - BlobContainerItemWithoutName: inline
    - from_xml: [
      [text, Name, Name],
      [text, Properties.Etag, ETag],
      [text, Properties.Last-Modified, LastModified],
      [text, Properties.PublicAccess, AccessType],
      [text, Properties.HasImmutabilityPolicy, HasImmutabilityPolicy],
      [text, Properties.HasLegalHold, HasLegalHold],
      [text, Properties.LeaseStatus, LeaseStatus],
      [text, Properties.LeaseState, LeaseState],
      [text, Properties.LeaseDuration, LeaseDuration],
      [start_tag, Metadata, Metadata],
    ]
  BlobItem:
    - Name: std::string
    - Deleted: bool = false
    - Snapshot: std::string
    - Properties: BlobHttpHeaders
    - Metadata: std::map<std::string, std::string>
    - CreationTime: std::string
    - LastModified: std::string
    - ETag: std::string
    - ContentLength: uint64_t = 0
    - BlobType: BlobType = BlobType::Unknown
    - Tier: AccessTier = AccessTier::Unknown
    - AccessTierInferred: bool = true
    - LeaseStatus: BlobLeaseStatus = BlobLeaseStatus::Unlocked
    - LeaseState: BlobLeaseState = BlobLeaseState::Available
    - LeaseDuration: std::string
    - BlobResponseEncryptionOptions: inline
    - from_xml: [
      [text, Name, Name],
      [text, Deleted, Deleted],
      [text, Snapshot, Snapshot],
      [text, Properties.Content-Type, Properties.ContentType],
      [text, Properties.Content-Encoding, Properties.ContentEncoding],
      [text, Properties.Content-Language, Properties.ContentLanguage],
      [text, Properties.Content-MD5, Properties.ContentMD5],
      [text, Properties.Cache-Control, Properties.CacheControl],
      [text, Properties.Content-Disposition, Properties.ContentDisposition],
      [text, Properties.Creation-Time, CreationTime],
      [text, Properties.Last-Modified, LastModified],
      [text, Properties.Etag, ETag],
      [text, Properties.Content-Length, ContentLength],
      [text, Properties.BlobType, BlobType],
      [text, Properties.AccessTier, Tier],
      [text, Properties.AccessTierInferred, AccessTierInferred],
      [text, Properties.LeaseStatus, LeaseStatus],
      [text, Properties.LeaseState, LeaseState],
      [text, Properties.LeaseDuration, LeaseDuration],
      [text, Properties.ServerEncrypted, ServerEncrypted],
      [text, Properties.EncryptionKeySHA256, EncryptionKeySHA256],
      [start_tag, Metadata, Metadata],
    ]
  ListBlobsIncludeItem:
    - type: enum class
    - Copy: copy
    - Deleted: "deleted"
    - Metadata: "metadata"
    - Snapshots: "snapshots"
    - UncomittedBlobs: "uncommittedblobs"
  BlobContainerInfo:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
  ListBlobContainersIncludeOption:
    - type: enum class
    - None: ""
    - Metadata: "metadata"
  BlockListTypeOption:
    - type: enum class
    - Committed: "committed"
    - Uncommitted: "uncommitted"
    - All: "all"
  DeleteSnapshotsOption:
    - type: enum class
    - None: ""
    - IncludeSnapshots: "include"
    - Only: "only"
  BlobArchiveStatus:
    - type: enum class
    - Unknown: ""
    - RehydratePendingToHot: "rehydrate-pending-to-hot"
    - RehydratePendingToCool: "rehydrate-pending-to-cool"
  BlobProperties:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - CreationTime: std::string
    - Metadata: std::map<std::string, std::string>
    - BlobType: BlobType = BlobType::Unknown
    - LeaseDuration: std::string
    - LeaseState: BlobLeaseState = BlobLeaseState::Available
    - LeaseStatus: BlobLeaseStatus = BlobLeaseStatus::Unlocked
    - ContentLength: uint64_t = 0
    - BlobHttpHeaders: inline
    - SequenceNumber: uint64_t = 0  # only for page blob
    - CommittedBlockCount: int = 0  # only for append blob
    - BlobResponseEncryptionOptions: inline
    - Tier: AccessTier = AccessTier::Unknown
    - AccessTierInferred: bool = true
    - ArchiveStatus: BlobArchiveStatus = BlobArchiveStatus::Unknown
    - AccessTierChangeTime: std::string
  BlobInfo:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - SequenceNumber: uint64_t = 0
  BlobCopyInfo:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - CopyId: std::string
    - CopyStatus: CopyStatus = CopyStatus::Unknown
  BlobSnapshotInfo:
    - BasicResponse: inline
    - Snapshot: std::string
    - ETag: std::string
    - LastModified: std::string
    - BlobResponseEncryptionOptions: inline
  UserDelegationKey:
    - BasicResponse: inline
    - SignedObjectId: std::string
    - SignedTenantId: std::string
    - SignedStartsOn: std::string
    - SignedExpiresOn: std::string
    - SignedService: std::string
    - SignedVersion: std::string
    - Value: std::string
    - from_xml: [
      [text, UserDelegationKey.SignedOid, SignedObjectId],
      [text, UserDelegationKey.SignedTid, SignedTenantId],
      [text, UserDelegationKey.SignedStart, SignedStartsOn],
      [text, UserDelegationKey.SignedExpiry, SignedExpiresOn],
      [text, UserDelegationKey.SignedService, SignedService],
      [text, UserDelegationKey.SignedVersion, SignedVersion],
      [text, UserDelegationKey.Value, Value],
    ]
  PageInfo:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - ContentMD5: std::string
    - ContentCRC64: std::string
    - SequenceNumber: uint64_t = 0
    - BlobResponseEncryptionOptions: inline
  PageBlobInfo:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - SequenceNumber: uint64_t = 0
  PageRangesInfo:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - BlobContentLength: uint64_t = 0
    - PageRange: std::vector<std::pair<uint64_t, uint64_t>>
    - ClearRange: std::vector<std::pair<uint64_t, uint64_t>>
    - from_xml: [
      [start_tag, PageList.PageRange, PageRange],
      [start_tag, PageList.ClearRange, ClearRange],
    ]
  BlobAppendInfo:
    - BasicResponse: inline
    - ETag: std::string
    - LastModified: std::string
    - ContentMD5: std::string
    - ContentCRC64: std::string
    - AppendOffset: uint64_t = std::numeric_limits<uint64_t>::max()
    - CommittedBlockCount: uint64_t = std::numeric_limits<uint64_t>::max()
    - BlobResponseEncryptionOptions: inline
